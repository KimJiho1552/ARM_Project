
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  08004a40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004a40  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae95  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdb  00000000  00000000  0002af2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0b  00000000  00000000  0002e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd44  00000000  00000000  00046fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af09  00000000  00000000  00054cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfbf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  000dfc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004838 	.word	0x08004838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004838 	.word	0x08004838

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 f9f9 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000100 	.word	0x20000100

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 f9c9 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000100 	.word	0x20000100

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f000 ffba 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f000 ffb4 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f000 ffae 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f000 ffa8 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f000 ffa2 	bl	80011c8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 ff9c 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 ff96 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 ff90 	bl	80011c8 <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 ff8d 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 ff87 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80002f8:	1d39      	adds	r1, r7, #4
 80002fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002fe:	2201      	movs	r2, #1
 8000300:	4803      	ldr	r0, [pc, #12]	; (8000310 <__io_putchar+0x20>)
 8000302:	f003 f968 	bl	80035d6 <HAL_UART_Transmit>

  return ch;
 8000306:	687b      	ldr	r3, [r7, #4]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000198 	.word	0x20000198

08000314 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { //Switch Interrupt
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5) flag = !flag;
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	2b20      	cmp	r3, #32
 8000322:	d109      	bne.n	8000338 <HAL_GPIO_EXTI_Callback+0x24>
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <HAL_GPIO_EXTI_Callback+0x30>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	bf0c      	ite	eq
 800032c:	2301      	moveq	r3, #1
 800032e:	2300      	movne	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <HAL_GPIO_EXTI_Callback+0x30>)
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000214 	.word	0x20000214

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 feda 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 fa3c 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f000 fbc0 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000358:	f000 fb6e 	bl	8000a38 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800035c:	f000 fb96 	bl	8000a8c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000360:	f000 fb40 	bl	80009e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000364:	f000 fa8a 	bl	800087c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000368:	f000 fb0e 	bl	8000988 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800036c:	f7ff ff6d 	bl	800024a <lcd_init>

  motor[6] = 3;
 8000370:	4b8f      	ldr	r3, [pc, #572]	; (80005b0 <main+0x268>)
 8000372:	2203      	movs	r2, #3
 8000374:	619a      	str	r2, [r3, #24]

  HAL_ADC_Start_DMA(&hadc1, adc_value, 6);
 8000376:	2206      	movs	r2, #6
 8000378:	498e      	ldr	r1, [pc, #568]	; (80005b4 <main+0x26c>)
 800037a:	488f      	ldr	r0, [pc, #572]	; (80005b8 <main+0x270>)
 800037c:	f001 f820 	bl	80013c0 <HAL_ADC_Start_DMA>
//	  adc_value[0] = (uint16_t)HAL_ADC_GetValue(&hadc1);
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	  adc_value[1] = (uint16_t)HAL_ADC_GetValue(&hadc1);

	  if((adc_value[0] < 3500)&&(adc_value[0] > 595))	motor[0] = 0;
 8000380:	4b8c      	ldr	r3, [pc, #560]	; (80005b4 <main+0x26c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000388:	4293      	cmp	r3, r2
 800038a:	dc08      	bgt.n	800039e <main+0x56>
 800038c:	4b89      	ldr	r3, [pc, #548]	; (80005b4 <main+0x26c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8000394:	db03      	blt.n	800039e <main+0x56>
 8000396:	4b86      	ldr	r3, [pc, #536]	; (80005b0 <main+0x268>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	e011      	b.n	80003c2 <main+0x7a>
	  else if(adc_value[0] <= 595)						motor[0] = 1;
 800039e:	4b85      	ldr	r3, [pc, #532]	; (80005b4 <main+0x26c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80003a6:	da03      	bge.n	80003b0 <main+0x68>
 80003a8:	4b81      	ldr	r3, [pc, #516]	; (80005b0 <main+0x268>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	e008      	b.n	80003c2 <main+0x7a>
	  else if(adc_value[0] >= 3500)						motor[0] = 2;
 80003b0:	4b80      	ldr	r3, [pc, #512]	; (80005b4 <main+0x26c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f640 52ab 	movw	r2, #3499	; 0xdab
 80003b8:	4293      	cmp	r3, r2
 80003ba:	dd02      	ble.n	80003c2 <main+0x7a>
 80003bc:	4b7c      	ldr	r3, [pc, #496]	; (80005b0 <main+0x268>)
 80003be:	2202      	movs	r2, #2
 80003c0:	601a      	str	r2, [r3, #0]

	  if((adc_value[1] < 3500)&&(adc_value[1] > 595))	motor[1] = 0;
 80003c2:	4b7c      	ldr	r3, [pc, #496]	; (80005b4 <main+0x26c>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f640 52ab 	movw	r2, #3499	; 0xdab
 80003ca:	4293      	cmp	r3, r2
 80003cc:	dc08      	bgt.n	80003e0 <main+0x98>
 80003ce:	4b79      	ldr	r3, [pc, #484]	; (80005b4 <main+0x26c>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80003d6:	db03      	blt.n	80003e0 <main+0x98>
 80003d8:	4b75      	ldr	r3, [pc, #468]	; (80005b0 <main+0x268>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	e011      	b.n	8000404 <main+0xbc>
	  else if(adc_value[1] <= 595)						motor[1] = 1;
 80003e0:	4b74      	ldr	r3, [pc, #464]	; (80005b4 <main+0x26c>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80003e8:	da03      	bge.n	80003f2 <main+0xaa>
 80003ea:	4b71      	ldr	r3, [pc, #452]	; (80005b0 <main+0x268>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	e008      	b.n	8000404 <main+0xbc>
	  else if(adc_value[1] >= 3500)						motor[1] = 2;
 80003f2:	4b70      	ldr	r3, [pc, #448]	; (80005b4 <main+0x26c>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f640 52ab 	movw	r2, #3499	; 0xdab
 80003fa:	4293      	cmp	r3, r2
 80003fc:	dd02      	ble.n	8000404 <main+0xbc>
 80003fe:	4b6c      	ldr	r3, [pc, #432]	; (80005b0 <main+0x268>)
 8000400:	2202      	movs	r2, #2
 8000402:	605a      	str	r2, [r3, #4]
	  //step motor
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	  adc_value[2] = (uint16_t)HAL_ADC_GetValue(&hadc1);

	  if((adc_value[2] < 3500)&&(adc_value[2] > 595))	motor[2] = 0;
 8000404:	4b6b      	ldr	r3, [pc, #428]	; (80005b4 <main+0x26c>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f640 52ab 	movw	r2, #3499	; 0xdab
 800040c:	4293      	cmp	r3, r2
 800040e:	dc08      	bgt.n	8000422 <main+0xda>
 8000410:	4b68      	ldr	r3, [pc, #416]	; (80005b4 <main+0x26c>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8000418:	db03      	blt.n	8000422 <main+0xda>
 800041a:	4b65      	ldr	r3, [pc, #404]	; (80005b0 <main+0x268>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	e011      	b.n	8000446 <main+0xfe>
	  else if(adc_value[2] <= 595)						motor[2] = 1;
 8000422:	4b64      	ldr	r3, [pc, #400]	; (80005b4 <main+0x26c>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800042a:	da03      	bge.n	8000434 <main+0xec>
 800042c:	4b60      	ldr	r3, [pc, #384]	; (80005b0 <main+0x268>)
 800042e:	2201      	movs	r2, #1
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	e008      	b.n	8000446 <main+0xfe>
	  else if(adc_value[2] >= 3500)						motor[2] = 2;
 8000434:	4b5f      	ldr	r3, [pc, #380]	; (80005b4 <main+0x26c>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f640 52ab 	movw	r2, #3499	; 0xdab
 800043c:	4293      	cmp	r3, r2
 800043e:	dd02      	ble.n	8000446 <main+0xfe>
 8000440:	4b5b      	ldr	r3, [pc, #364]	; (80005b0 <main+0x268>)
 8000442:	2202      	movs	r2, #2
 8000444:	609a      	str	r2, [r3, #8]
	  //servo motor1
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	  adc_value[3] = (uint16_t)HAL_ADC_GetValue(&hadc1);

	  if((adc_value[3] < 3500)&&(adc_value[3] > 595))	motor[3] = 0;
 8000446:	4b5b      	ldr	r3, [pc, #364]	; (80005b4 <main+0x26c>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800044e:	4293      	cmp	r3, r2
 8000450:	dc08      	bgt.n	8000464 <main+0x11c>
 8000452:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <main+0x26c>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800045a:	db03      	blt.n	8000464 <main+0x11c>
 800045c:	4b54      	ldr	r3, [pc, #336]	; (80005b0 <main+0x268>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	e011      	b.n	8000488 <main+0x140>
	  else if(adc_value[3] <= 595)						motor[3] = 1;
 8000464:	4b53      	ldr	r3, [pc, #332]	; (80005b4 <main+0x26c>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800046c:	da03      	bge.n	8000476 <main+0x12e>
 800046e:	4b50      	ldr	r3, [pc, #320]	; (80005b0 <main+0x268>)
 8000470:	2201      	movs	r2, #1
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	e008      	b.n	8000488 <main+0x140>
	  else if(adc_value[3] >= 3500)						motor[3] = 2;
 8000476:	4b4f      	ldr	r3, [pc, #316]	; (80005b4 <main+0x26c>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800047e:	4293      	cmp	r3, r2
 8000480:	dd02      	ble.n	8000488 <main+0x140>
 8000482:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <main+0x268>)
 8000484:	2202      	movs	r2, #2
 8000486:	60da      	str	r2, [r3, #12]
	  //servo motor2
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	  adc_value[4] = (uint16_t)HAL_ADC_GetValue(&hadc1);

	  if((adc_value[4] < 3500)&&(adc_value[4] > 595))	motor[4] = 0;
 8000488:	4b4a      	ldr	r3, [pc, #296]	; (80005b4 <main+0x26c>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000490:	4293      	cmp	r3, r2
 8000492:	dc08      	bgt.n	80004a6 <main+0x15e>
 8000494:	4b47      	ldr	r3, [pc, #284]	; (80005b4 <main+0x26c>)
 8000496:	691b      	ldr	r3, [r3, #16]
 8000498:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 800049c:	db03      	blt.n	80004a6 <main+0x15e>
 800049e:	4b44      	ldr	r3, [pc, #272]	; (80005b0 <main+0x268>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
 80004a4:	e011      	b.n	80004ca <main+0x182>
	  else if(adc_value[4] <= 595)						motor[4] = 1;
 80004a6:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <main+0x26c>)
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80004ae:	da03      	bge.n	80004b8 <main+0x170>
 80004b0:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <main+0x268>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	e008      	b.n	80004ca <main+0x182>
	  else if(adc_value[4] >= 3500)						motor[4] = 2;
 80004b8:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <main+0x26c>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	f640 52ab 	movw	r2, #3499	; 0xdab
 80004c0:	4293      	cmp	r3, r2
 80004c2:	dd02      	ble.n	80004ca <main+0x182>
 80004c4:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <main+0x268>)
 80004c6:	2202      	movs	r2, #2
 80004c8:	611a      	str	r2, [r3, #16]
	  //servo motor3
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	  adc_value[5] = (uint16_t)HAL_ADC_GetValue(&hadc1);

	  if((adc_value[5] < 3500)&&(adc_value[5] > 595))	motor[5] = 0;
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <main+0x26c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f640 52ab 	movw	r2, #3499	; 0xdab
 80004d2:	4293      	cmp	r3, r2
 80004d4:	dc08      	bgt.n	80004e8 <main+0x1a0>
 80004d6:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <main+0x26c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80004de:	db03      	blt.n	80004e8 <main+0x1a0>
 80004e0:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <main+0x268>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	e011      	b.n	800050c <main+0x1c4>
	  else if(adc_value[5] <= 595)						motor[5] = 1;
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <main+0x26c>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 80004f0:	da03      	bge.n	80004fa <main+0x1b2>
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <main+0x268>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	e008      	b.n	800050c <main+0x1c4>
	  else if(adc_value[5] >= 3500)						motor[5] = 2;
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <main+0x26c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000502:	4293      	cmp	r3, r2
 8000504:	dd02      	ble.n	800050c <main+0x1c4>
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <main+0x268>)
 8000508:	2202      	movs	r2, #2
 800050a:	615a      	str	r2, [r3, #20]

	  //--------------------printf---------------------

	  //Check HAL_ADC_Start_DMA
	  printf("wheel_X : %d, wheel_Y : %d, ", adc_value[0], adc_value[1]);
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <main+0x26c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a28      	ldr	r2, [pc, #160]	; (80005b4 <main+0x26c>)
 8000512:	6852      	ldr	r2, [r2, #4]
 8000514:	4619      	mov	r1, r3
 8000516:	4829      	ldr	r0, [pc, #164]	; (80005bc <main+0x274>)
 8000518:	f003 f9fa 	bl	8003910 <iprintf>
	  printf("step : %d, servo1 : %d, ", adc_value[2], adc_value[3]);
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <main+0x26c>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <main+0x26c>)
 8000522:	68d2      	ldr	r2, [r2, #12]
 8000524:	4619      	mov	r1, r3
 8000526:	4826      	ldr	r0, [pc, #152]	; (80005c0 <main+0x278>)
 8000528:	f003 f9f2 	bl	8003910 <iprintf>
	  printf("servo2 : %d, servo3 : %d\n\r\n\r", adc_value[4], adc_value[5]);
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <main+0x26c>)
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <main+0x26c>)
 8000532:	6952      	ldr	r2, [r2, #20]
 8000534:	4619      	mov	r1, r3
 8000536:	4823      	ldr	r0, [pc, #140]	; (80005c4 <main+0x27c>)
 8000538:	f003 f9ea 	bl	8003910 <iprintf>

	  //Check change Joystick value
	  printf("flag : %d, ", flag);
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <main+0x280>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	4822      	ldr	r0, [pc, #136]	; (80005cc <main+0x284>)
 8000544:	f003 f9e4 	bl	8003910 <iprintf>
	  printf("wheel_X : %d, wheel_Y : %d, ", motor[0], motor[1]);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <main+0x268>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <main+0x268>)
 800054e:	6852      	ldr	r2, [r2, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	481a      	ldr	r0, [pc, #104]	; (80005bc <main+0x274>)
 8000554:	f003 f9dc 	bl	8003910 <iprintf>
	  printf("step : %d, servo1 : %d, ", motor[2], motor[3]);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <main+0x268>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <main+0x268>)
 800055e:	68d2      	ldr	r2, [r2, #12]
 8000560:	4619      	mov	r1, r3
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <main+0x278>)
 8000564:	f003 f9d4 	bl	8003910 <iprintf>
	  printf("servo2 : %d, servo3 : %d\n\r\n\r", motor[4], motor[5]);
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <main+0x268>)
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	4a10      	ldr	r2, [pc, #64]	; (80005b0 <main+0x268>)
 800056e:	6952      	ldr	r2, [r2, #20]
 8000570:	4619      	mov	r1, r3
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <main+0x27c>)
 8000574:	f003 f9cc 	bl	8003910 <iprintf>

	  //----------------------lcd-----------------------

	  if(flag == 0) {
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <main+0x280>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	f040 8086 	bne.w	800068e <main+0x346>
		  if((motor[0] == 0) && (motor[1] == 0)) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0x268>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d126      	bne.n	80005d8 <main+0x290>
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <main+0x268>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d122      	bne.n	80005d8 <main+0x290>
			  lcd_put_cur(1, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff fe39 	bl	800020c <lcd_put_cur>
			  lcd_send_string("          ");
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0x288>)
 800059c:	f7ff fe92 	bl	80002c4 <lcd_send_string>
			  lcd_put_cur(1, 0);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff fe32 	bl	800020c <lcd_put_cur>
			  lcd_send_string("STOP");
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x28c>)
 80005aa:	f7ff fe8b 	bl	80002c4 <lcd_send_string>
 80005ae:	e06e      	b.n	800068e <main+0x346>
 80005b0:	200001f4 	.word	0x200001f4
 80005b4:	200001dc 	.word	0x200001dc
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	08004850 	.word	0x08004850
 80005c0:	08004870 	.word	0x08004870
 80005c4:	0800488c 	.word	0x0800488c
 80005c8:	20000214 	.word	0x20000214
 80005cc:	080048ac 	.word	0x080048ac
 80005d0:	080048b8 	.word	0x080048b8
 80005d4:	080048c4 	.word	0x080048c4
		  }
		  else if((motor[0] == 0) && (motor[1] == 1)) {
 80005d8:	4b6a      	ldr	r3, [pc, #424]	; (8000784 <main+0x43c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d112      	bne.n	8000606 <main+0x2be>
 80005e0:	4b68      	ldr	r3, [pc, #416]	; (8000784 <main+0x43c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d10e      	bne.n	8000606 <main+0x2be>
			  lcd_put_cur(1, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe0e 	bl	800020c <lcd_put_cur>
			  lcd_send_string("          ");
 80005f0:	4865      	ldr	r0, [pc, #404]	; (8000788 <main+0x440>)
 80005f2:	f7ff fe67 	bl	80002c4 <lcd_send_string>
			  lcd_put_cur(1, 0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff fe07 	bl	800020c <lcd_put_cur>
			  lcd_send_string("GO");
 80005fe:	4863      	ldr	r0, [pc, #396]	; (800078c <main+0x444>)
 8000600:	f7ff fe60 	bl	80002c4 <lcd_send_string>
 8000604:	e043      	b.n	800068e <main+0x346>
		  }
		  else if((motor[0] == 1) && (motor[1] == 0)) {
 8000606:	4b5f      	ldr	r3, [pc, #380]	; (8000784 <main+0x43c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d112      	bne.n	8000634 <main+0x2ec>
 800060e:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <main+0x43c>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10e      	bne.n	8000634 <main+0x2ec>
			  lcd_put_cur(1, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff fdf7 	bl	800020c <lcd_put_cur>
			  lcd_send_string("          ");
 800061e:	485a      	ldr	r0, [pc, #360]	; (8000788 <main+0x440>)
 8000620:	f7ff fe50 	bl	80002c4 <lcd_send_string>
			  lcd_put_cur(1, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff fdf0 	bl	800020c <lcd_put_cur>
			  lcd_send_string("TURN LEFT");
 800062c:	4858      	ldr	r0, [pc, #352]	; (8000790 <main+0x448>)
 800062e:	f7ff fe49 	bl	80002c4 <lcd_send_string>
 8000632:	e02c      	b.n	800068e <main+0x346>
		  }
		  else if((motor[0] == 2) && (motor[1] == 0)) {
 8000634:	4b53      	ldr	r3, [pc, #332]	; (8000784 <main+0x43c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d112      	bne.n	8000662 <main+0x31a>
 800063c:	4b51      	ldr	r3, [pc, #324]	; (8000784 <main+0x43c>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10e      	bne.n	8000662 <main+0x31a>
			  lcd_put_cur(1, 0);
 8000644:	2100      	movs	r1, #0
 8000646:	2001      	movs	r0, #1
 8000648:	f7ff fde0 	bl	800020c <lcd_put_cur>
			  lcd_send_string("          ");
 800064c:	484e      	ldr	r0, [pc, #312]	; (8000788 <main+0x440>)
 800064e:	f7ff fe39 	bl	80002c4 <lcd_send_string>
			  lcd_put_cur(1, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fdd9 	bl	800020c <lcd_put_cur>
			  lcd_send_string("TURN RIGHT");
 800065a:	484e      	ldr	r0, [pc, #312]	; (8000794 <main+0x44c>)
 800065c:	f7ff fe32 	bl	80002c4 <lcd_send_string>
 8000660:	e015      	b.n	800068e <main+0x346>
		  }
		  else if((motor[0] == 0) && (motor[1] == 2)) {
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <main+0x43c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d111      	bne.n	800068e <main+0x346>
 800066a:	4b46      	ldr	r3, [pc, #280]	; (8000784 <main+0x43c>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d10d      	bne.n	800068e <main+0x346>
			  lcd_put_cur(1, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fdc9 	bl	800020c <lcd_put_cur>
			  lcd_send_string("          ");
 800067a:	4843      	ldr	r0, [pc, #268]	; (8000788 <main+0x440>)
 800067c:	f7ff fe22 	bl	80002c4 <lcd_send_string>
			  lcd_put_cur(1, 0);
 8000680:	2100      	movs	r1, #0
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdc2 	bl	800020c <lcd_put_cur>
			  lcd_send_string("BACK");
 8000688:	4843      	ldr	r0, [pc, #268]	; (8000798 <main+0x450>)
 800068a:	f7ff fe1b 	bl	80002c4 <lcd_send_string>
//	  sprintf(TxBuffer, "%d#%d#%d#%d#%d#%d", wheel_X, wheel_Y, step, servo1, servo2, servo3);
//	  printf("%s\n\r\n\r", TxBuffer);
//	  HAL_UART_Transmit(&huart1, TxBuffer, TxBufferSize, 0xffff);

	  //Master : Use 6 Transmit -> Slave : Use HAL_UART_Receive_DMA
	  if(flag == 0) {
 800068e:	4b43      	ldr	r3, [pc, #268]	; (800079c <main+0x454>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d138      	bne.n	8000708 <main+0x3c0>
		  lcd_put_cur(0, 1);
 8000696:	2101      	movs	r1, #1
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff fdb7 	bl	800020c <lcd_put_cur>
		  lcd_send_string("      ");
 800069e:	4840      	ldr	r0, [pc, #256]	; (80007a0 <main+0x458>)
 80006a0:	f7ff fe10 	bl	80002c4 <lcd_send_string>
		  lcd_put_cur(0, 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff fdb0 	bl	800020c <lcd_put_cur>
		  lcd_send_string("unlock");
 80006ac:	483d      	ldr	r0, [pc, #244]	; (80007a4 <main+0x45c>)
 80006ae:	f7ff fe09 	bl	80002c4 <lcd_send_string>
		  HAL_UART_Transmit(&huart1, &motor[0], 1, 0xff);
 80006b2:	23ff      	movs	r3, #255	; 0xff
 80006b4:	2201      	movs	r2, #1
 80006b6:	4933      	ldr	r1, [pc, #204]	; (8000784 <main+0x43c>)
 80006b8:	483b      	ldr	r0, [pc, #236]	; (80007a8 <main+0x460>)
 80006ba:	f002 ff8c 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[1], 1, 0xff);
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	2201      	movs	r2, #1
 80006c2:	493a      	ldr	r1, [pc, #232]	; (80007ac <main+0x464>)
 80006c4:	4838      	ldr	r0, [pc, #224]	; (80007a8 <main+0x460>)
 80006c6:	f002 ff86 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 80006ca:	23ff      	movs	r3, #255	; 0xff
 80006cc:	2201      	movs	r2, #1
 80006ce:	4938      	ldr	r1, [pc, #224]	; (80007b0 <main+0x468>)
 80006d0:	4835      	ldr	r0, [pc, #212]	; (80007a8 <main+0x460>)
 80006d2:	f002 ff80 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 80006d6:	23ff      	movs	r3, #255	; 0xff
 80006d8:	2201      	movs	r2, #1
 80006da:	4935      	ldr	r1, [pc, #212]	; (80007b0 <main+0x468>)
 80006dc:	4832      	ldr	r0, [pc, #200]	; (80007a8 <main+0x460>)
 80006de:	f002 ff7a 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	2201      	movs	r2, #1
 80006e6:	4932      	ldr	r1, [pc, #200]	; (80007b0 <main+0x468>)
 80006e8:	482f      	ldr	r0, [pc, #188]	; (80007a8 <main+0x460>)
 80006ea:	f002 ff74 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	2201      	movs	r2, #1
 80006f2:	492f      	ldr	r1, [pc, #188]	; (80007b0 <main+0x468>)
 80006f4:	482c      	ldr	r0, [pc, #176]	; (80007a8 <main+0x460>)
 80006f6:	f002 ff6e 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[6], 1, 0xff);
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	2201      	movs	r2, #1
 80006fe:	492d      	ldr	r1, [pc, #180]	; (80007b4 <main+0x46c>)
 8000700:	4829      	ldr	r0, [pc, #164]	; (80007a8 <main+0x460>)
 8000702:	f002 ff68 	bl	80035d6 <HAL_UART_Transmit>
 8000706:	e63b      	b.n	8000380 <main+0x38>
	  }
	  else if(flag == 1) {
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0x454>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	f47f ae37 	bne.w	8000380 <main+0x38>
		  lcd_put_cur(0, 1);
 8000712:	2101      	movs	r1, #1
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fd79 	bl	800020c <lcd_put_cur>
		  lcd_send_string("      ");
 800071a:	4821      	ldr	r0, [pc, #132]	; (80007a0 <main+0x458>)
 800071c:	f7ff fdd2 	bl	80002c4 <lcd_send_string>
		  lcd_put_cur(0, 1);
 8000720:	2101      	movs	r1, #1
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff fd72 	bl	800020c <lcd_put_cur>
		  lcd_send_string("lock");
 8000728:	4823      	ldr	r0, [pc, #140]	; (80007b8 <main+0x470>)
 800072a:	f7ff fdcb 	bl	80002c4 <lcd_send_string>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 800072e:	23ff      	movs	r3, #255	; 0xff
 8000730:	2201      	movs	r2, #1
 8000732:	491f      	ldr	r1, [pc, #124]	; (80007b0 <main+0x468>)
 8000734:	481c      	ldr	r0, [pc, #112]	; (80007a8 <main+0x460>)
 8000736:	f002 ff4e 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &zero, 1, 0xff);
 800073a:	23ff      	movs	r3, #255	; 0xff
 800073c:	2201      	movs	r2, #1
 800073e:	491c      	ldr	r1, [pc, #112]	; (80007b0 <main+0x468>)
 8000740:	4819      	ldr	r0, [pc, #100]	; (80007a8 <main+0x460>)
 8000742:	f002 ff48 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[2], 1, 0xff);
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	2201      	movs	r2, #1
 800074a:	491c      	ldr	r1, [pc, #112]	; (80007bc <main+0x474>)
 800074c:	4816      	ldr	r0, [pc, #88]	; (80007a8 <main+0x460>)
 800074e:	f002 ff42 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[3], 1, 0xff);
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	2201      	movs	r2, #1
 8000756:	491a      	ldr	r1, [pc, #104]	; (80007c0 <main+0x478>)
 8000758:	4813      	ldr	r0, [pc, #76]	; (80007a8 <main+0x460>)
 800075a:	f002 ff3c 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[4], 1, 0xff);
 800075e:	23ff      	movs	r3, #255	; 0xff
 8000760:	2201      	movs	r2, #1
 8000762:	4918      	ldr	r1, [pc, #96]	; (80007c4 <main+0x47c>)
 8000764:	4810      	ldr	r0, [pc, #64]	; (80007a8 <main+0x460>)
 8000766:	f002 ff36 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[5], 1, 0xff);
 800076a:	23ff      	movs	r3, #255	; 0xff
 800076c:	2201      	movs	r2, #1
 800076e:	4916      	ldr	r1, [pc, #88]	; (80007c8 <main+0x480>)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <main+0x460>)
 8000772:	f002 ff30 	bl	80035d6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &motor[6], 1, 0xff);
 8000776:	23ff      	movs	r3, #255	; 0xff
 8000778:	2201      	movs	r2, #1
 800077a:	490e      	ldr	r1, [pc, #56]	; (80007b4 <main+0x46c>)
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <main+0x460>)
 800077e:	f002 ff2a 	bl	80035d6 <HAL_UART_Transmit>
	  if((adc_value[0] < 3500)&&(adc_value[0] > 595))	motor[0] = 0;
 8000782:	e5fd      	b.n	8000380 <main+0x38>
 8000784:	200001f4 	.word	0x200001f4
 8000788:	080048b8 	.word	0x080048b8
 800078c:	080048cc 	.word	0x080048cc
 8000790:	080048d0 	.word	0x080048d0
 8000794:	080048dc 	.word	0x080048dc
 8000798:	080048e8 	.word	0x080048e8
 800079c:	20000214 	.word	0x20000214
 80007a0:	080048f0 	.word	0x080048f0
 80007a4:	080048f8 	.word	0x080048f8
 80007a8:	20000154 	.word	0x20000154
 80007ac:	200001f8 	.word	0x200001f8
 80007b0:	20000210 	.word	0x20000210
 80007b4:	2000020c 	.word	0x2000020c
 80007b8:	08004900 	.word	0x08004900
 80007bc:	200001fc 	.word	0x200001fc
 80007c0:	20000200 	.word	0x20000200
 80007c4:	20000204 	.word	0x20000204
 80007c8:	20000208 	.word	0x20000208

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2228      	movs	r2, #40	; 0x28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 f890 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800080c:	2300      	movs	r3, #0
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000810:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081a:	4618      	mov	r0, r3
 800081c:	f002 f9be 	bl	8002b9c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000826:	f000 f9db 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fc2a 	bl	80030a0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000852:	f000 f9c5 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000856:	2302      	movs	r3, #2
 8000858:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800085a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800085e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fdb4 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 f9b7 	bl	8000be0 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <MX_ADC1_Init+0x104>)
 800088e:	4a3d      	ldr	r2, [pc, #244]	; (8000984 <MX_ADC1_Init+0x108>)
 8000890:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000892:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <MX_ADC1_Init+0x104>)
 8000894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000898:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <MX_ADC1_Init+0x104>)
 800089c:	2201      	movs	r2, #1
 800089e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b37      	ldr	r3, [pc, #220]	; (8000980 <MX_ADC1_Init+0x104>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <MX_ADC1_Init+0x104>)
 80008a8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <MX_ADC1_Init+0x104>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_ADC1_Init+0x104>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ba:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_ADC1_Init+0x104>)
 80008bc:	f000 fca8 	bl	8001210 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008c6:	f000 f98b 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ca:	2306      	movs	r3, #6
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80008d2:	2307      	movs	r3, #7
 80008d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4829      	ldr	r0, [pc, #164]	; (8000980 <MX_ADC1_Init+0x104>)
 80008dc:	f000 fe6a 	bl	80015b4 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 f97b 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008ea:	2307      	movs	r3, #7
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_ADC1_Init+0x104>)
 80008f8:	f000 fe5c 	bl	80015b4 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000902:	f000 f96d 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000906:	2308      	movs	r3, #8
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800090a:	2303      	movs	r3, #3
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <MX_ADC1_Init+0x104>)
 8000914:	f000 fe4e 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800091e:	f000 f95f 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000922:	2309      	movs	r3, #9
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000926:	2304      	movs	r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_ADC1_Init+0x104>)
 8000930:	f000 fe40 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800093a:	f000 f951 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800093e:	230a      	movs	r3, #10
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000942:	2305      	movs	r3, #5
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_ADC1_Init+0x104>)
 800094c:	f000 fe32 	bl	80015b4 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000956:	f000 f943 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800095a:	230b      	movs	r3, #11
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800095e:	2306      	movs	r3, #6
 8000960:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_ADC1_Init+0x104>)
 8000968:	f000 fe24 	bl	80015b4 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000972:	f000 f935 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c
 8000984:	40012400 	.word	0x40012400

08000988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x50>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_I2C1_Init+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C1_Init+0x50>)
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x58>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c6:	f001 fc9f 	bl	8002308 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 f906 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000100 	.word	0x20000100
 80009dc:	40005400 	.word	0x40005400
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART1_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f002 fd8e 	bl	800353c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f8db 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000154 	.word	0x20000154
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART2_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f002 fd64 	bl	800353c <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f8b1 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000198 	.word	0x20000198
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_DMA_Init+0x48>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <MX_DMA_Init+0x48>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_DMA_Init+0x48>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f001 f851 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f001 f86a 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f001 f849 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ac4:	200f      	movs	r0, #15
 8000ac6:	f001 f862 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0320 	and.w	r3, r3, #32
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_GPIO_Init+0xf4>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2120      	movs	r1, #32
 8000b50:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b52:	f001 fba9 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b6c:	f001 fa18 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b88:	f001 fa0a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MX_GPIO_Init+0x104>)
 8000ba0:	f001 f9fe 	bl	8001fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2017      	movs	r0, #23
 8000baa:	f000 ffd4 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bae:	2017      	movs	r0, #23
 8000bb0:	f000 ffed 	bl	8001b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2028      	movs	r0, #40	; 0x28
 8000bba:	f000 ffcc 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bbe:	2028      	movs	r0, #40	; 0x28
 8000bc0:	f000 ffe5 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	10110000 	.word	0x10110000
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <HAL_ADC_MspInit+0x114>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d175      	bne.n	8000d5c <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a3c      	ldr	r2, [pc, #240]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_ADC_MspInit+0x118>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <HAL_ADC_MspInit+0x11c>)
 8000ce0:	f001 f95e 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce4:	23c0      	movs	r3, #192	; 0xc0
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <HAL_ADC_MspInit+0x120>)
 8000cf4:	f001 f954 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	4619      	mov	r1, r3
 8000d06:	481b      	ldr	r0, [pc, #108]	; (8000d74 <HAL_ADC_MspInit+0x124>)
 8000d08:	f001 f94a 	bl	8001fa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_ADC_MspInit+0x12c>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d36:	2220      	movs	r2, #32
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d42:	f000 ff3f 	bl	8001bc4 <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8000d4c:	f7ff ff48 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d54:	621a      	str	r2, [r3, #32]
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_ADC_MspInit+0x128>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012400 	.word	0x40012400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	200000bc 	.word	0x200000bc
 8000d7c:	40020008 	.word	0x40020008

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_I2C_MspInit+0x70>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d123      	bne.n	8000de8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	; 0xc0
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dcc:	f001 f8e8 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_UART_MspInit+0xe0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d132      	bne.n	8000e82 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4820      	ldr	r0, [pc, #128]	; (8000ee4 <HAL_UART_MspInit+0xe8>)
 8000e62:	f001 f89d 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <HAL_UART_MspInit+0xe8>)
 8000e7c:	f001 f890 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e80:	e028      	b.n	8000ed4 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_UART_MspInit+0xec>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e96:	61d3      	str	r3, [r2, #28]
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_UART_MspInit+0xe4>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0xe8>)
 8000ed0:	f001 f866 	bl	8001fa0 <HAL_GPIO_Init>
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40004400 	.word	0x40004400

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f32:	f000 f92d 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA1_Channel1_IRQHandler+0x10>)
 8000f42:	f000 fef9 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000bc 	.word	0x200000bc

08000f50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f54:	2020      	movs	r0, #32
 8000f56:	f001 f9bf 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f66:	f001 f9b7 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e00a      	b.n	8000f96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f80:	f3af 8000 	nop.w
 8000f84:	4601      	mov	r1, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	60ba      	str	r2, [r7, #8]
 8000f8c:	b2ca      	uxtb	r2, r1
 8000f8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbf0      	blt.n	8000f80 <_read+0x12>
	}

return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e009      	b.n	8000fce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f994 	bl	80002f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbf1      	blt.n	8000fba <_write+0x12>
	}
	return len;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_close>:

int _close(int file)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	605a      	str	r2, [r3, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <_isatty>:

int _isatty(int file)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	return 1;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f002 fc1c 	bl	80038ac <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20005000 	.word	0x20005000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000218 	.word	0x20000218
 80010a8:	20000230 	.word	0x20000230

080010ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010de:	f7ff ffe5 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f002 fbe9 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff f92f 	bl	8000348 <main>
  bx lr
 80010ea:	4770      	bx	lr
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010f4:	080049d0 	.word	0x080049d0
  ldr r2, =_sbss
 80010f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010fc:	20000230 	.word	0x20000230

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x28>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 fd13 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fd64 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fd2b 	bl	8001baa <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 fcf3 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x1c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_IncTick+0x20>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000008 	.word	0x20000008
 80011b0:	2000021c 	.word	0x2000021c

080011b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_GetTick+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	2000021c 	.word	0x2000021c

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff fff0 	bl	80011b4 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffe0 	bl	80011b4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0be      	b.n	80013b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fcfe 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 faff 	bl	8001858 <ADC_ConversionStop_Disable>
 800125a:	4603      	mov	r3, r0
 800125c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	f040 8099 	bne.w	800139e <HAL_ADC_Init+0x18e>
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 8095 	bne.w	800139e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	f043 0202 	orr.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7b1b      	ldrb	r3, [r3, #12]
 8001296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4313      	orrs	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0xa2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_ADC_Init+0xa8>
 80012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b6:	e000      	b.n	80012ba <HAL_ADC_Init+0xaa>
 80012b8:	2300      	movs	r3, #0
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7d1b      	ldrb	r3, [r3, #20]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d119      	bne.n	80012fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7b1b      	ldrb	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	035a      	lsls	r2, r3, #13
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e00b      	b.n	80012fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	f043 0220 	orr.w	r2, r3, #32
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_ADC_Init+0x1a8>)
 8001318:	4013      	ands	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132c:	d003      	beq.n	8001336 <HAL_ADC_Init+0x126>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d104      	bne.n	8001340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	3b01      	subs	r3, #1
 800133c:	051b      	lsls	r3, r3, #20
 800133e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	430a      	orrs	r2, r1
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_ADC_Init+0x1ac>)
 800135c:	4013      	ands	r3, r2
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	429a      	cmp	r2, r3
 8001362:	d10b      	bne.n	800137c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	f023 0303 	bic.w	r3, r3, #3
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800137a:	e018      	b.n	80013ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f023 0312 	bic.w	r3, r3, #18
 8001384:	f043 0210 	orr.w	r2, r3, #16
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800139c:	e007      	b.n	80013ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f043 0210 	orr.w	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	ffe1f7fd 	.word	0xffe1f7fd
 80013bc:	ff1f0efe 	.word	0xff1f0efe

080013c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a64      	ldr	r2, [pc, #400]	; (8001568 <HAL_ADC_Start_DMA+0x1a8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_Start_DMA+0x24>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_ADC_Start_DMA+0x1ac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x32>
 80013e4:	4b60      	ldr	r3, [pc, #384]	; (8001568 <HAL_ADC_Start_DMA+0x1a8>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 80b3 	bne.w	8001558 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_Start_DMA+0x40>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e0ae      	b.n	800155e <HAL_ADC_Start_DMA+0x19e>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f9cb 	bl	80017a4 <ADC_Enable>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f040 809a 	bne.w	800154e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_ADC_Start_DMA+0x1ac>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d105      	bne.n	8001444 <HAL_ADC_Start_DMA+0x84>
 8001438:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <HAL_ADC_Start_DMA+0x1a8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d115      	bne.n	8001470 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d026      	beq.n	80014ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800146e:	e01d      	b.n	80014ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a39      	ldr	r2, [pc, #228]	; (8001568 <HAL_ADC_Start_DMA+0x1a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d004      	beq.n	8001490 <HAL_ADC_Start_DMA+0xd0>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_ADC_Start_DMA+0x1ac>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d10d      	bne.n	80014ac <HAL_ADC_Start_DMA+0xec>
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_ADC_Start_DMA+0x1a8>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	f023 0206 	bic.w	r2, r3, #6
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_ADC_Start_DMA+0x1b0>)
 80014da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_ADC_Start_DMA+0x1b4>)
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <HAL_ADC_Start_DMA+0x1b8>)
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0202 	mvn.w	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001504:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a18      	ldr	r0, [r3, #32]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	334c      	adds	r3, #76	; 0x4c
 8001510:	4619      	mov	r1, r3
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f000 fbaf 	bl	8001c78 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001524:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001528:	d108      	bne.n	800153c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001538:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800153a:	e00f      	b.n	800155c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800154a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800154c:	e006      	b.n	800155c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001556:	e001      	b.n	800155c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	7dfb      	ldrb	r3, [r7, #23]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40012400 	.word	0x40012400
 800156c:	40012800 	.word	0x40012800
 8001570:	080018db 	.word	0x080018db
 8001574:	08001957 	.word	0x08001957
 8001578:	08001973 	.word	0x08001973

0800157c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x20>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e0dc      	b.n	800178e <HAL_ADC_ConfigChannel+0x1da>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d81c      	bhi.n	800161e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b05      	subs	r3, #5
 80015f6:	221f      	movs	r2, #31
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4019      	ands	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b05      	subs	r3, #5
 8001610:	fa00 f203 	lsl.w	r2, r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
 800161c:	e03c      	b.n	8001698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d81c      	bhi.n	8001660 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b23      	subs	r3, #35	; 0x23
 8001638:	221f      	movs	r2, #31
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	4019      	ands	r1, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b23      	subs	r3, #35	; 0x23
 8001652:	fa00 f203 	lsl.w	r2, r0, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
 800165e:	e01b      	b.n	8001698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b41      	subs	r3, #65	; 0x41
 8001672:	221f      	movs	r2, #31
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	4019      	ands	r1, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b41      	subs	r3, #65	; 0x41
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b09      	cmp	r3, #9
 800169e:	d91c      	bls.n	80016da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68d9      	ldr	r1, [r3, #12]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	3b1e      	subs	r3, #30
 80016b2:	2207      	movs	r2, #7
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6898      	ldr	r0, [r3, #8]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	3b1e      	subs	r3, #30
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	e019      	b.n	800170e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6919      	ldr	r1, [r3, #16]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	2207      	movs	r2, #7
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6898      	ldr	r0, [r3, #8]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	fa00 f203 	lsl.w	r2, r0, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b10      	cmp	r3, #16
 8001714:	d003      	beq.n	800171e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171a:	2b11      	cmp	r3, #17
 800171c:	d132      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_ADC_ConfigChannel+0x1e4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d125      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d126      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001744:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d11a      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_ADC_ConfigChannel+0x1e8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9a      	lsrs	r2, r3, #18
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001764:	e002      	b.n	800176c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3b01      	subs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x1b2>
 8001772:	e007      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40012400 	.word	0x40012400
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83

080017a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d040      	beq.n	8001844 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <ADC_Enable+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <ADC_Enable+0xb0>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9b      	lsrs	r3, r3, #18
 80017de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e0:	e002      	b.n	80017e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f9      	bne.n	80017e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ee:	f7ff fce1 	bl	80011b4 <HAL_GetTick>
 80017f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	e01f      	b.n	8001836 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017f6:	f7ff fcdd 	bl	80011b4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d918      	bls.n	8001836 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d011      	beq.n	8001836 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f043 0210 	orr.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e007      	b.n	8001846 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d1d8      	bne.n	80017f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d12e      	bne.n	80018d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001882:	f7ff fc97 	bl	80011b4 <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001888:	e01b      	b.n	80018c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800188a:	f7ff fc93 	bl	80011b4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d914      	bls.n	80018c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10d      	bne.n	80018c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e007      	b.n	80018d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d0dc      	beq.n	800188a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d127      	bne.n	8001944 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800190a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800190e:	d115      	bne.n	800193c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fe1d 	bl	800157c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001942:	e004      	b.n	800194e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe12 	bl	800158e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe01 	bl	80015a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4906      	ldr	r1, [pc, #24]	; (8001a40 <__NVIC_EnableIRQ+0x34>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff90 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff2d 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff42 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff90 	bl	8001a98 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5f 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff35 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e043      	b.n	8001c62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_DMA_Init+0xa8>)
 8001be2:	4413      	add	r3, r2
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_DMA_Init+0xac>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_DMA_Init+0xb0>)
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	bffdfff8 	.word	0xbffdfff8
 8001c70:	cccccccd 	.word	0xcccccccd
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Start_IT+0x20>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e04a      	b.n	8001d2e <HAL_DMA_Start_IT+0xb6>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d13a      	bne.n	8001d20 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f938 	bl	8001f44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 020e 	orr.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e00f      	b.n	8001d0e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0204 	bic.w	r2, r2, #4
 8001cfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 020a 	orr.w	r2, r2, #10
 8001d0c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e005      	b.n	8001d2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d04f      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d029      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xae>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_IRQHandler+0xaa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_IRQHandler+0xa4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a62      	ldr	r2, [pc, #392]	; (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x9e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x98>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	; (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_DMA_IRQHandler+0x92>
 8001dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc8:	e00e      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dce:	e00b      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dd4:	e008      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dda:	e005      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de0:	e002      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de6:	2304      	movs	r3, #4
 8001de8:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001dea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8094 	beq.w	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	e08e      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2202      	movs	r2, #2
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d056      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d051      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020a 	bic.w	r2, r2, #10
 8001e36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d029      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x166>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x162>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x15c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x156>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x150>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d102      	bne.n	8001e82 <HAL_DMA_IRQHandler+0x14a>
 8001e7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e80:	e00e      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e86:	e00b      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8c:	e008      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	e005      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	e002      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e000      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001ea2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d034      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ebc:	e02f      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
    }
  }
  return;
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
}
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020008 	.word	0x40020008
 8001f2c:	4002001c 	.word	0x4002001c
 8001f30:	40020030 	.word	0x40020030
 8001f34:	40020044 	.word	0x40020044
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	4002006c 	.word	0x4002006c
 8001f40:	40020000 	.word	0x40020000

08001f44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d108      	bne.n	8001f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f82:	e007      	b.n	8001f94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	e169      	b.n	8002288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8158 	bne.w	8002282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a9a      	ldr	r2, [pc, #616]	; (8002240 <HAL_GPIO_Init+0x2a0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d05e      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001fdc:	4a98      	ldr	r2, [pc, #608]	; (8002240 <HAL_GPIO_Init+0x2a0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d875      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001fe2:	4a98      	ldr	r2, [pc, #608]	; (8002244 <HAL_GPIO_Init+0x2a4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d058      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001fe8:	4a96      	ldr	r2, [pc, #600]	; (8002244 <HAL_GPIO_Init+0x2a4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d86f      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001fee:	4a96      	ldr	r2, [pc, #600]	; (8002248 <HAL_GPIO_Init+0x2a8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d052      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8001ff4:	4a94      	ldr	r2, [pc, #592]	; (8002248 <HAL_GPIO_Init+0x2a8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d869      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8001ffa:	4a94      	ldr	r2, [pc, #592]	; (800224c <HAL_GPIO_Init+0x2ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04c      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 8002000:	4a92      	ldr	r2, [pc, #584]	; (800224c <HAL_GPIO_Init+0x2ac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d863      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8002006:	4a92      	ldr	r2, [pc, #584]	; (8002250 <HAL_GPIO_Init+0x2b0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d046      	beq.n	800209a <HAL_GPIO_Init+0xfa>
 800200c:	4a90      	ldr	r2, [pc, #576]	; (8002250 <HAL_GPIO_Init+0x2b0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d85d      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 8002012:	2b12      	cmp	r3, #18
 8002014:	d82a      	bhi.n	800206c <HAL_GPIO_Init+0xcc>
 8002016:	2b12      	cmp	r3, #18
 8002018:	d859      	bhi.n	80020ce <HAL_GPIO_Init+0x12e>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <HAL_GPIO_Init+0x80>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	0800209b 	.word	0x0800209b
 8002024:	08002075 	.word	0x08002075
 8002028:	08002087 	.word	0x08002087
 800202c:	080020c9 	.word	0x080020c9
 8002030:	080020cf 	.word	0x080020cf
 8002034:	080020cf 	.word	0x080020cf
 8002038:	080020cf 	.word	0x080020cf
 800203c:	080020cf 	.word	0x080020cf
 8002040:	080020cf 	.word	0x080020cf
 8002044:	080020cf 	.word	0x080020cf
 8002048:	080020cf 	.word	0x080020cf
 800204c:	080020cf 	.word	0x080020cf
 8002050:	080020cf 	.word	0x080020cf
 8002054:	080020cf 	.word	0x080020cf
 8002058:	080020cf 	.word	0x080020cf
 800205c:	080020cf 	.word	0x080020cf
 8002060:	080020cf 	.word	0x080020cf
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002091 	.word	0x08002091
 800206c:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_GPIO_Init+0x2b4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002072:	e02c      	b.n	80020ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e029      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	3304      	adds	r3, #4
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e024      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	3308      	adds	r3, #8
 800208c:	623b      	str	r3, [r7, #32]
          break;
 800208e:	e01f      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	330c      	adds	r3, #12
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e01a      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a2:	2304      	movs	r3, #4
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e013      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b0:	2308      	movs	r3, #8
 80020b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	611a      	str	r2, [r3, #16]
          break;
 80020ba:	e009      	b.n	80020d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	615a      	str	r2, [r3, #20]
          break;
 80020c6:	e003      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x130>
          break;
 80020ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2bff      	cmp	r3, #255	; 0xff
 80020d4:	d801      	bhi.n	80020da <HAL_GPIO_Init+0x13a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_Init+0x13e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2bff      	cmp	r3, #255	; 0xff
 80020e4:	d802      	bhi.n	80020ec <HAL_GPIO_Init+0x14c>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x152>
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3b08      	subs	r3, #8
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	210f      	movs	r1, #15
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	6a39      	ldr	r1, [r7, #32]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	431a      	orrs	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80b1 	beq.w	8002282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002120:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_GPIO_Init+0x2bc>)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a40      	ldr	r2, [pc, #256]	; (8002260 <HAL_GPIO_Init+0x2c0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_GPIO_Init+0x1ec>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3f      	ldr	r2, [pc, #252]	; (8002264 <HAL_GPIO_Init+0x2c4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1e8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3e      	ldr	r2, [pc, #248]	; (8002268 <HAL_GPIO_Init+0x2c8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1e4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3d      	ldr	r2, [pc, #244]	; (800226c <HAL_GPIO_Init+0x2cc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1e0>
 800217c:	2303      	movs	r3, #3
 800217e:	e006      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002180:	2304      	movs	r3, #4
 8002182:	e004      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002184:	2302      	movs	r3, #2
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_GPIO_Init+0x1ee>
 800218c:	2300      	movs	r3, #0
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	f002 0203 	and.w	r2, r2, #3
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	4093      	lsls	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800219e:	492f      	ldr	r1, [pc, #188]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	492c      	ldr	r1, [pc, #176]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c6:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4928      	ldr	r1, [pc, #160]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4922      	ldr	r1, [pc, #136]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	491e      	ldr	r1, [pc, #120]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4918      	ldr	r1, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4914      	ldr	r1, [pc, #80]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d021      	beq.n	8002274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e021      	b.n	8002282 <HAL_GPIO_Init+0x2e2>
 800223e:	bf00      	nop
 8002240:	10320000 	.word	0x10320000
 8002244:	10310000 	.word	0x10310000
 8002248:	10220000 	.word	0x10220000
 800224c:	10210000 	.word	0x10210000
 8002250:	10120000 	.word	0x10120000
 8002254:	10110000 	.word	0x10110000
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000
 8002260:	40010800 	.word	0x40010800
 8002264:	40010c00 	.word	0x40010c00
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_GPIO_Init+0x304>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	43db      	mvns	r3, r3
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <HAL_GPIO_Init+0x304>)
 800227e:	4013      	ands	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	3301      	adds	r3, #1
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ae8e 	bne.w	8001fb4 <HAL_GPIO_Init+0x14>
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	372c      	adds	r7, #44	; 0x2c
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40010400 	.word	0x40010400

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f80c 	bl	8000314 <HAL_GPIO_EXTI_Callback>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e12b      	b.n	8002572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fd26 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800236c:	f000 ffea 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a81      	ldr	r2, [pc, #516]	; (800257c <HAL_I2C_Init+0x274>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d807      	bhi.n	800238c <HAL_I2C_Init+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_I2C_Init+0x278>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e006      	b.n	800239a <HAL_I2C_Init+0x92>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_I2C_Init+0x27c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0e7      	b.n	8002572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a78      	ldr	r2, [pc, #480]	; (8002588 <HAL_I2C_Init+0x280>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_I2C_Init+0x274>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d802      	bhi.n	80023dc <HAL_I2C_Init+0xd4>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	e009      	b.n	80023f0 <HAL_I2C_Init+0xe8>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_I2C_Init+0x284>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	3301      	adds	r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	495c      	ldr	r1, [pc, #368]	; (800257c <HAL_I2C_Init+0x274>)
 800240c:	428b      	cmp	r3, r1
 800240e:	d819      	bhi.n	8002444 <HAL_I2C_Init+0x13c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e59      	subs	r1, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fbb1 f3f3 	udiv	r3, r1, r3
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002424:	400b      	ands	r3, r1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_I2C_Init+0x138>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e59      	subs	r1, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fbb1 f3f3 	udiv	r3, r1, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	e051      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002440:	2304      	movs	r3, #4
 8002442:	e04f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_I2C_Init+0x168>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e012      	b.n	8002496 <HAL_I2C_Init+0x18e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x196>
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10e      	bne.n	80024c4 <HAL_I2C_Init+0x1bc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e58      	subs	r0, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	6809      	ldr	r1, [r1, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6911      	ldr	r1, [r2, #16]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	000186a0 	.word	0x000186a0
 8002580:	001e847f 	.word	0x001e847f
 8002584:	003d08ff 	.word	0x003d08ff
 8002588:	431bde83 	.word	0x431bde83
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7fe fe06 	bl	80011b4 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80e0 	bne.w	8002778 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	4970      	ldr	r1, [pc, #448]	; (8002784 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f964 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0d3      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0cc      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2221      	movs	r2, #33	; 0x21
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_I2C_Master_Transmit+0x1f8>)
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f89c 	bl	800278c <I2C_MasterRequestWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08d      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002674:	e066      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f9de 	bl	8002a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x188>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	6a39      	ldr	r1, [r7, #32]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f9ce 	bl	8002abe <I2C_WaitOnBTFFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01a      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d194      	bne.n	8002676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d006      	beq.n	80027b6 <I2C_MasterRequestWrite+0x2a>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d003      	beq.n	80027b6 <I2C_MasterRequestWrite+0x2a>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b4:	d108      	bne.n	80027c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e00b      	b.n	80027e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d107      	bne.n	80027e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f84f 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002806:	d103      	bne.n	8002810 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e035      	b.n	8002880 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800281c:	d108      	bne.n	8002830 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	e01b      	b.n	8002868 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	11db      	asrs	r3, r3, #7
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0306 	and.w	r3, r3, #6
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f063 030f 	orn	r3, r3, #15
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <I2C_MasterRequestWrite+0xfc>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f875 	bl	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e010      	b.n	8002880 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <I2C_MasterRequestWrite+0x100>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f865 	bl	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	00010008 	.word	0x00010008
 800288c:	00010002 	.word	0x00010002

08002890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a0:	e025      	b.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d021      	beq.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fe fc83 	bl	80011b4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e023      	b.n	8002936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10d      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4013      	ands	r3, r2
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	e00c      	b.n	800292e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4013      	ands	r3, r2
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf0c      	ite	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	2300      	movne	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	429a      	cmp	r2, r3
 8002932:	d0b6      	beq.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294c:	e051      	b.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295c:	d123      	bne.n	80029a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f043 0204 	orr.w	r2, r3, #4
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e046      	b.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d021      	beq.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7fe fc01 	bl	80011b4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e020      	b.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10c      	bne.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e00b      	b.n	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4013      	ands	r3, r2
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d18d      	bne.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a48:	e02d      	b.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f878 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02d      	b.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d021      	beq.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe fba7 	bl	80011b4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d1ca      	bne.n	8002a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aca:	e02d      	b.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f837 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e02d      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae2:	d021      	beq.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7fe fb66 	bl	80011b4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d1ca      	bne.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d11b      	bne.n	8002b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e272      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e24c      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76>
 8002c04:	4b80      	ldr	r3, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xbc>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a71      	ldr	r2, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fa9c 	bl	80011b4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fa98 	bl	80011b4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e200      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe4>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fa88 	bl	80011b4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fa84 	bl	80011b4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1ec      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x10c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1c0      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4939      	ldr	r1, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fa3d 	bl	80011b4 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fa39 	bl	80011b4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1a1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4927      	ldr	r1, [pc, #156]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fa1c 	bl	80011b4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fa18 	bl	80011b4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e180      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03a      	beq.n	8002e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7fe f9fc 	bl	80011b4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f9f8 	bl	80011b4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e160      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fad8 	bl	8003394 <RCC_Delay>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe f9e2 	bl	80011b4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe f9de 	bl	80011b4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e146      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	42420000 	.word	0x42420000
 8002e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe f99f 	bl	80011b4 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe f99b 	bl	80011b4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e103      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x356>
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe f94f 	bl	80011b4 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f94b 	bl	80011b4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0b1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x37e>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe f939 	bl	80011b4 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe f935 	bl	80011b4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e09b      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8087 	beq.w	8003092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d061      	beq.n	8003054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d146      	bne.n	8003026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f909 	bl	80011b4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe f905 	bl	80011b4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e06d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4921      	ldr	r1, [pc, #132]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a19      	ldr	r1, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	491b      	ldr	r1, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f8d9 	bl	80011b4 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe f8d5 	bl	80011b4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
 8003024:	e035      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe f8c2 	bl	80011b4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe f8be 	bl	80011b4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e026      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
 8003052:	e01e      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e019      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x500>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d0      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4965      	ldr	r1, [pc, #404]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	4b59      	ldr	r3, [pc, #356]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d040      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d115      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e073      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4936      	ldr	r1, [pc, #216]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe f810 	bl	80011b4 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe f80c 	bl	80011b4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e053      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d210      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322e:	f000 f821 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8003232:	4602      	mov	r2, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	490a      	ldr	r1, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	5ccb      	ldrb	r3, [r1, r3]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1cc>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd ff6e 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	08004918 	.word	0x08004918
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b490      	push	{r4, r7}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCC_GetSysClockFreq+0xac>)
 800327c:	1d3c      	adds	r4, r7, #4
 800327e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003284:	f240 2301 	movw	r3, #513	; 0x201
 8003288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x40>
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x46>
 80032b2:	e02b      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b4:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032b6:	623b      	str	r3, [r7, #32]
      break;
 80032b8:	e02b      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3328      	adds	r3, #40	; 0x28
 80032c4:	443b      	add	r3, r7
 80032c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0c5b      	lsrs	r3, r3, #17
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	3328      	adds	r3, #40	; 0x28
 80032e2:	443b      	add	r3, r7
 80032e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	623b      	str	r3, [r7, #32]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb4>)
 800330e:	623b      	str	r3, [r7, #32]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	6a3b      	ldr	r3, [r7, #32]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc90      	pop	{r4, r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	08004908 	.word	0x08004908
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	003d0900 	.word	0x003d0900

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_RCC_GetHCLKFreq+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff2 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08004928 	.word	0x08004928

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffde 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0adb      	lsrs	r3, r3, #11
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	08004928 	.word	0x08004928

08003394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <RCC_Delay+0x34>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <RCC_Delay+0x38>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0a5b      	lsrs	r3, r3, #9
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b0:	bf00      	nop
  }
  while (Delay --);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	60fa      	str	r2, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f9      	bne.n	80033b0 <RCC_Delay+0x1c>
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	20000000 	.word	0x20000000
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d07d      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d118      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a42      	ldr	r2, [pc, #264]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003430:	f7fd fec0 	bl	80011b4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd febc 	bl	80011b4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e06d      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d027      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800348a:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fd fe8b 	bl	80011b4 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fd fe87 	bl	80011b4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e036      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	490b      	ldr	r1, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
 8003538:	42420440 	.word	0x42420440

0800353c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e03f      	b.n	80035ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fc4a 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800357e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f905 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b08a      	sub	sp, #40	; 0x28
 80035da:	af02      	add	r7, sp, #8
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d17c      	bne.n	80036f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_UART_Transmit+0x2c>
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e075      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_UART_Transmit+0x3e>
 8003610:	2302      	movs	r3, #2
 8003612:	e06e      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2221      	movs	r2, #33	; 0x21
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362a:	f7fd fdc3 	bl	80011b4 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d108      	bne.n	8003658 <HAL_UART_Transmit+0x82>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e003      	b.n	8003660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003668:	e02a      	b.n	80036c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f840 	bl	80036fa <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e036      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3302      	adds	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e007      	b.n	80036b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1cf      	bne.n	800366a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2140      	movs	r1, #64	; 0x40
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f810 	bl	80036fa <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e006      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370a:	e02c      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d028      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0x30>
 800371a:	f7fd fd4b 	bl	80011b4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	429a      	cmp	r2, r3
 8003728:	d21d      	bcs.n	8003766 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003738:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d0c3      	beq.n	800370c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ca:	f023 030c 	bic.w	r3, r3, #12
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <UART_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7ff fdb8 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	e002      	b.n	8003806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7ff fda0 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8003804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <UART_SetConfig+0x118>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	0119      	lsls	r1, r3, #4
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <UART_SetConfig+0x118>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <UART_SetConfig+0x118>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385c:	4419      	add	r1, r3
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fbb2 f2f3 	udiv	r2, r2, r3
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <UART_SetConfig+0x118>)
 8003876:	fba3 0302 	umull	r0, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2064      	movs	r0, #100	; 0x64
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <UART_SetConfig+0x118>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	440a      	add	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40013800 	.word	0x40013800
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <__errno>:
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <__errno+0x8>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	2600      	movs	r6, #0
 80038bc:	4d0c      	ldr	r5, [pc, #48]	; (80038f0 <__libc_init_array+0x38>)
 80038be:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038c0:	1b64      	subs	r4, r4, r5
 80038c2:	10a4      	asrs	r4, r4, #2
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	f000 ffb6 	bl	8004838 <_init>
 80038cc:	2600      	movs	r6, #0
 80038ce:	4d0a      	ldr	r5, [pc, #40]	; (80038f8 <__libc_init_array+0x40>)
 80038d0:	4c0a      	ldr	r4, [pc, #40]	; (80038fc <__libc_init_array+0x44>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	080049c8 	.word	0x080049c8
 80038f4:	080049c8 	.word	0x080049c8
 80038f8:	080049c8 	.word	0x080049c8
 80038fc:	080049cc 	.word	0x080049cc

08003900 <memset>:
 8003900:	4603      	mov	r3, r0
 8003902:	4402      	add	r2, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <iprintf>:
 8003910:	b40f      	push	{r0, r1, r2, r3}
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <iprintf+0x2c>)
 8003914:	b513      	push	{r0, r1, r4, lr}
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	b124      	cbz	r4, 8003924 <iprintf+0x14>
 800391a:	69a3      	ldr	r3, [r4, #24]
 800391c:	b913      	cbnz	r3, 8003924 <iprintf+0x14>
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f866 	bl	80039f0 <__sinit>
 8003924:	ab05      	add	r3, sp, #20
 8003926:	4620      	mov	r0, r4
 8003928:	9a04      	ldr	r2, [sp, #16]
 800392a:	68a1      	ldr	r1, [r4, #8]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	f000 f9bb 	bl	8003ca8 <_vfiprintf_r>
 8003932:	b002      	add	sp, #8
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	b004      	add	sp, #16
 800393a:	4770      	bx	lr
 800393c:	2000000c 	.word	0x2000000c

08003940 <std>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	4604      	mov	r4, r0
 8003946:	e9c0 3300 	strd	r3, r3, [r0]
 800394a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394e:	6083      	str	r3, [r0, #8]
 8003950:	8181      	strh	r1, [r0, #12]
 8003952:	6643      	str	r3, [r0, #100]	; 0x64
 8003954:	81c2      	strh	r2, [r0, #14]
 8003956:	6183      	str	r3, [r0, #24]
 8003958:	4619      	mov	r1, r3
 800395a:	2208      	movs	r2, #8
 800395c:	305c      	adds	r0, #92	; 0x5c
 800395e:	f7ff ffcf 	bl	8003900 <memset>
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <std+0x38>)
 8003964:	6224      	str	r4, [r4, #32]
 8003966:	6263      	str	r3, [r4, #36]	; 0x24
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <std+0x3c>)
 800396a:	62a3      	str	r3, [r4, #40]	; 0x28
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <std+0x40>)
 800396e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <std+0x44>)
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	08004255 	.word	0x08004255
 800397c:	08004277 	.word	0x08004277
 8003980:	080042af 	.word	0x080042af
 8003984:	080042d3 	.word	0x080042d3

08003988 <_cleanup_r>:
 8003988:	4901      	ldr	r1, [pc, #4]	; (8003990 <_cleanup_r+0x8>)
 800398a:	f000 b8af 	b.w	8003aec <_fwalk_reent>
 800398e:	bf00      	nop
 8003990:	080045a5 	.word	0x080045a5

08003994 <__sfmoreglue>:
 8003994:	2268      	movs	r2, #104	; 0x68
 8003996:	b570      	push	{r4, r5, r6, lr}
 8003998:	1e4d      	subs	r5, r1, #1
 800399a:	4355      	muls	r5, r2
 800399c:	460e      	mov	r6, r1
 800399e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039a2:	f000 f8e5 	bl	8003b70 <_malloc_r>
 80039a6:	4604      	mov	r4, r0
 80039a8:	b140      	cbz	r0, 80039bc <__sfmoreglue+0x28>
 80039aa:	2100      	movs	r1, #0
 80039ac:	e9c0 1600 	strd	r1, r6, [r0]
 80039b0:	300c      	adds	r0, #12
 80039b2:	60a0      	str	r0, [r4, #8]
 80039b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039b8:	f7ff ffa2 	bl	8003900 <memset>
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}

080039c0 <__sfp_lock_acquire>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__sfp_lock_acquire+0x8>)
 80039c2:	f000 b8b3 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000221 	.word	0x20000221

080039cc <__sfp_lock_release>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__sfp_lock_release+0x8>)
 80039ce:	f000 b8ae 	b.w	8003b2e <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000221 	.word	0x20000221

080039d8 <__sinit_lock_acquire>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__sinit_lock_acquire+0x8>)
 80039da:	f000 b8a7 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 80039de:	bf00      	nop
 80039e0:	20000222 	.word	0x20000222

080039e4 <__sinit_lock_release>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__sinit_lock_release+0x8>)
 80039e6:	f000 b8a2 	b.w	8003b2e <__retarget_lock_release_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000222 	.word	0x20000222

080039f0 <__sinit>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4604      	mov	r4, r0
 80039f4:	f7ff fff0 	bl	80039d8 <__sinit_lock_acquire>
 80039f8:	69a3      	ldr	r3, [r4, #24]
 80039fa:	b11b      	cbz	r3, 8003a04 <__sinit+0x14>
 80039fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a00:	f7ff bff0 	b.w	80039e4 <__sinit_lock_release>
 8003a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a08:	6523      	str	r3, [r4, #80]	; 0x50
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <__sinit+0x68>)
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <__sinit+0x6c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	bf08      	it	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	4620      	mov	r0, r4
 8003a1a:	bf08      	it	eq
 8003a1c:	61a3      	streq	r3, [r4, #24]
 8003a1e:	f000 f81f 	bl	8003a60 <__sfp>
 8003a22:	6060      	str	r0, [r4, #4]
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 f81b 	bl	8003a60 <__sfp>
 8003a2a:	60a0      	str	r0, [r4, #8]
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f000 f817 	bl	8003a60 <__sfp>
 8003a32:	2200      	movs	r2, #0
 8003a34:	2104      	movs	r1, #4
 8003a36:	60e0      	str	r0, [r4, #12]
 8003a38:	6860      	ldr	r0, [r4, #4]
 8003a3a:	f7ff ff81 	bl	8003940 <std>
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2109      	movs	r1, #9
 8003a42:	68a0      	ldr	r0, [r4, #8]
 8003a44:	f7ff ff7c 	bl	8003940 <std>
 8003a48:	2202      	movs	r2, #2
 8003a4a:	2112      	movs	r1, #18
 8003a4c:	68e0      	ldr	r0, [r4, #12]
 8003a4e:	f7ff ff77 	bl	8003940 <std>
 8003a52:	2301      	movs	r3, #1
 8003a54:	61a3      	str	r3, [r4, #24]
 8003a56:	e7d1      	b.n	80039fc <__sinit+0xc>
 8003a58:	08004930 	.word	0x08004930
 8003a5c:	08003989 	.word	0x08003989

08003a60 <__sfp>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	4607      	mov	r7, r0
 8003a64:	f7ff ffac 	bl	80039c0 <__sfp_lock_acquire>
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <__sfp+0x84>)
 8003a6a:	681e      	ldr	r6, [r3, #0]
 8003a6c:	69b3      	ldr	r3, [r6, #24]
 8003a6e:	b913      	cbnz	r3, 8003a76 <__sfp+0x16>
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ffbd 	bl	80039f0 <__sinit>
 8003a76:	3648      	adds	r6, #72	; 0x48
 8003a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	d503      	bpl.n	8003a88 <__sfp+0x28>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	b30b      	cbz	r3, 8003ac8 <__sfp+0x68>
 8003a84:	6836      	ldr	r6, [r6, #0]
 8003a86:	e7f7      	b.n	8003a78 <__sfp+0x18>
 8003a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a8c:	b9d5      	cbnz	r5, 8003ac4 <__sfp+0x64>
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <__sfp+0x88>)
 8003a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a94:	60e3      	str	r3, [r4, #12]
 8003a96:	6665      	str	r5, [r4, #100]	; 0x64
 8003a98:	f000 f847 	bl	8003b2a <__retarget_lock_init_recursive>
 8003a9c:	f7ff ff96 	bl	80039cc <__sfp_lock_release>
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003aac:	6025      	str	r5, [r4, #0]
 8003aae:	61a5      	str	r5, [r4, #24]
 8003ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ab4:	f7ff ff24 	bl	8003900 <memset>
 8003ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac4:	3468      	adds	r4, #104	; 0x68
 8003ac6:	e7d9      	b.n	8003a7c <__sfp+0x1c>
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4638      	mov	r0, r7
 8003acc:	f7ff ff62 	bl	8003994 <__sfmoreglue>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	6030      	str	r0, [r6, #0]
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d1d5      	bne.n	8003a84 <__sfp+0x24>
 8003ad8:	f7ff ff78 	bl	80039cc <__sfp_lock_release>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	e7ee      	b.n	8003ac0 <__sfp+0x60>
 8003ae2:	bf00      	nop
 8003ae4:	08004930 	.word	0x08004930
 8003ae8:	ffff0001 	.word	0xffff0001

08003aec <_fwalk_reent>:
 8003aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af0:	4606      	mov	r6, r0
 8003af2:	4688      	mov	r8, r1
 8003af4:	2700      	movs	r7, #0
 8003af6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003afe:	f1b9 0901 	subs.w	r9, r9, #1
 8003b02:	d505      	bpl.n	8003b10 <_fwalk_reent+0x24>
 8003b04:	6824      	ldr	r4, [r4, #0]
 8003b06:	2c00      	cmp	r4, #0
 8003b08:	d1f7      	bne.n	8003afa <_fwalk_reent+0xe>
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b10:	89ab      	ldrh	r3, [r5, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d907      	bls.n	8003b26 <_fwalk_reent+0x3a>
 8003b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	d003      	beq.n	8003b26 <_fwalk_reent+0x3a>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4630      	mov	r0, r6
 8003b22:	47c0      	blx	r8
 8003b24:	4307      	orrs	r7, r0
 8003b26:	3568      	adds	r5, #104	; 0x68
 8003b28:	e7e9      	b.n	8003afe <_fwalk_reent+0x12>

08003b2a <__retarget_lock_init_recursive>:
 8003b2a:	4770      	bx	lr

08003b2c <__retarget_lock_acquire_recursive>:
 8003b2c:	4770      	bx	lr

08003b2e <__retarget_lock_release_recursive>:
 8003b2e:	4770      	bx	lr

08003b30 <sbrk_aligned>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4e0e      	ldr	r6, [pc, #56]	; (8003b6c <sbrk_aligned+0x3c>)
 8003b34:	460c      	mov	r4, r1
 8003b36:	6831      	ldr	r1, [r6, #0]
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b911      	cbnz	r1, 8003b42 <sbrk_aligned+0x12>
 8003b3c:	f000 fb7a 	bl	8004234 <_sbrk_r>
 8003b40:	6030      	str	r0, [r6, #0]
 8003b42:	4621      	mov	r1, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fb75 	bl	8004234 <_sbrk_r>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d00a      	beq.n	8003b64 <sbrk_aligned+0x34>
 8003b4e:	1cc4      	adds	r4, r0, #3
 8003b50:	f024 0403 	bic.w	r4, r4, #3
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d007      	beq.n	8003b68 <sbrk_aligned+0x38>
 8003b58:	1a21      	subs	r1, r4, r0
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 fb6a 	bl	8004234 <_sbrk_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d101      	bne.n	8003b68 <sbrk_aligned+0x38>
 8003b64:	f04f 34ff 	mov.w	r4, #4294967295
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	20000228 	.word	0x20000228

08003b70 <_malloc_r>:
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	1ccd      	adds	r5, r1, #3
 8003b76:	f025 0503 	bic.w	r5, r5, #3
 8003b7a:	3508      	adds	r5, #8
 8003b7c:	2d0c      	cmp	r5, #12
 8003b7e:	bf38      	it	cc
 8003b80:	250c      	movcc	r5, #12
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	4607      	mov	r7, r0
 8003b86:	db01      	blt.n	8003b8c <_malloc_r+0x1c>
 8003b88:	42a9      	cmp	r1, r5
 8003b8a:	d905      	bls.n	8003b98 <_malloc_r+0x28>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	2600      	movs	r6, #0
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4630      	mov	r0, r6
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	4e2e      	ldr	r6, [pc, #184]	; (8003c54 <_malloc_r+0xe4>)
 8003b9a:	f000 fdc5 	bl	8004728 <__malloc_lock>
 8003b9e:	6833      	ldr	r3, [r6, #0]
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	bb34      	cbnz	r4, 8003bf2 <_malloc_r+0x82>
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	f7ff ffc2 	bl	8003b30 <sbrk_aligned>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	4604      	mov	r4, r0
 8003bb0:	d14d      	bne.n	8003c4e <_malloc_r+0xde>
 8003bb2:	6834      	ldr	r4, [r6, #0]
 8003bb4:	4626      	mov	r6, r4
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	d140      	bne.n	8003c3c <_malloc_r+0xcc>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	eb04 0803 	add.w	r8, r4, r3
 8003bc4:	f000 fb36 	bl	8004234 <_sbrk_r>
 8003bc8:	4580      	cmp	r8, r0
 8003bca:	d13a      	bne.n	8003c42 <_malloc_r+0xd2>
 8003bcc:	6821      	ldr	r1, [r4, #0]
 8003bce:	3503      	adds	r5, #3
 8003bd0:	1a6d      	subs	r5, r5, r1
 8003bd2:	f025 0503 	bic.w	r5, r5, #3
 8003bd6:	3508      	adds	r5, #8
 8003bd8:	2d0c      	cmp	r5, #12
 8003bda:	bf38      	it	cc
 8003bdc:	250c      	movcc	r5, #12
 8003bde:	4638      	mov	r0, r7
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7ff ffa5 	bl	8003b30 <sbrk_aligned>
 8003be6:	3001      	adds	r0, #1
 8003be8:	d02b      	beq.n	8003c42 <_malloc_r+0xd2>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	442b      	add	r3, r5
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	e00e      	b.n	8003c10 <_malloc_r+0xa0>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	1b52      	subs	r2, r2, r5
 8003bf6:	d41e      	bmi.n	8003c36 <_malloc_r+0xc6>
 8003bf8:	2a0b      	cmp	r2, #11
 8003bfa:	d916      	bls.n	8003c2a <_malloc_r+0xba>
 8003bfc:	1961      	adds	r1, r4, r5
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	bf18      	it	ne
 8003c04:	6059      	strne	r1, [r3, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	bf08      	it	eq
 8003c0a:	6031      	streq	r1, [r6, #0]
 8003c0c:	5162      	str	r2, [r4, r5]
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	4638      	mov	r0, r7
 8003c12:	f104 060b 	add.w	r6, r4, #11
 8003c16:	f000 fd8d 	bl	8004734 <__malloc_unlock>
 8003c1a:	f026 0607 	bic.w	r6, r6, #7
 8003c1e:	1d23      	adds	r3, r4, #4
 8003c20:	1af2      	subs	r2, r6, r3
 8003c22:	d0b6      	beq.n	8003b92 <_malloc_r+0x22>
 8003c24:	1b9b      	subs	r3, r3, r6
 8003c26:	50a3      	str	r3, [r4, r2]
 8003c28:	e7b3      	b.n	8003b92 <_malloc_r+0x22>
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	bf0c      	ite	eq
 8003c30:	6032      	streq	r2, [r6, #0]
 8003c32:	605a      	strne	r2, [r3, #4]
 8003c34:	e7ec      	b.n	8003c10 <_malloc_r+0xa0>
 8003c36:	4623      	mov	r3, r4
 8003c38:	6864      	ldr	r4, [r4, #4]
 8003c3a:	e7b2      	b.n	8003ba2 <_malloc_r+0x32>
 8003c3c:	4634      	mov	r4, r6
 8003c3e:	6876      	ldr	r6, [r6, #4]
 8003c40:	e7b9      	b.n	8003bb6 <_malloc_r+0x46>
 8003c42:	230c      	movs	r3, #12
 8003c44:	4638      	mov	r0, r7
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	f000 fd74 	bl	8004734 <__malloc_unlock>
 8003c4c:	e7a1      	b.n	8003b92 <_malloc_r+0x22>
 8003c4e:	6025      	str	r5, [r4, #0]
 8003c50:	e7de      	b.n	8003c10 <_malloc_r+0xa0>
 8003c52:	bf00      	nop
 8003c54:	20000224 	.word	0x20000224

08003c58 <__sfputc_r>:
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	b410      	push	{r4}
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	da07      	bge.n	8003c74 <__sfputc_r+0x1c>
 8003c64:	6994      	ldr	r4, [r2, #24]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	db01      	blt.n	8003c6e <__sfputc_r+0x16>
 8003c6a:	290a      	cmp	r1, #10
 8003c6c:	d102      	bne.n	8003c74 <__sfputc_r+0x1c>
 8003c6e:	bc10      	pop	{r4}
 8003c70:	f000 bb34 	b.w	80042dc <__swbuf_r>
 8003c74:	6813      	ldr	r3, [r2, #0]
 8003c76:	1c58      	adds	r0, r3, #1
 8003c78:	6010      	str	r0, [r2, #0]
 8003c7a:	7019      	strb	r1, [r3, #0]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	bc10      	pop	{r4}
 8003c80:	4770      	bx	lr

08003c82 <__sfputs_r>:
 8003c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c84:	4606      	mov	r6, r0
 8003c86:	460f      	mov	r7, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	18d5      	adds	r5, r2, r3
 8003c8c:	42ac      	cmp	r4, r5
 8003c8e:	d101      	bne.n	8003c94 <__sfputs_r+0x12>
 8003c90:	2000      	movs	r0, #0
 8003c92:	e007      	b.n	8003ca4 <__sfputs_r+0x22>
 8003c94:	463a      	mov	r2, r7
 8003c96:	4630      	mov	r0, r6
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	f7ff ffdc 	bl	8003c58 <__sfputc_r>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d1f3      	bne.n	8003c8c <__sfputs_r+0xa>
 8003ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ca8 <_vfiprintf_r>:
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	460d      	mov	r5, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	4698      	mov	r8, r3
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	b09d      	sub	sp, #116	; 0x74
 8003cb6:	b118      	cbz	r0, 8003cc0 <_vfiprintf_r+0x18>
 8003cb8:	6983      	ldr	r3, [r0, #24]
 8003cba:	b90b      	cbnz	r3, 8003cc0 <_vfiprintf_r+0x18>
 8003cbc:	f7ff fe98 	bl	80039f0 <__sinit>
 8003cc0:	4b89      	ldr	r3, [pc, #548]	; (8003ee8 <_vfiprintf_r+0x240>)
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	d11b      	bne.n	8003cfe <_vfiprintf_r+0x56>
 8003cc6:	6875      	ldr	r5, [r6, #4]
 8003cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cca:	07d9      	lsls	r1, r3, #31
 8003ccc:	d405      	bmi.n	8003cda <_vfiprintf_r+0x32>
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	059a      	lsls	r2, r3, #22
 8003cd2:	d402      	bmi.n	8003cda <_vfiprintf_r+0x32>
 8003cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cd6:	f7ff ff29 	bl	8003b2c <__retarget_lock_acquire_recursive>
 8003cda:	89ab      	ldrh	r3, [r5, #12]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	d501      	bpl.n	8003ce4 <_vfiprintf_r+0x3c>
 8003ce0:	692b      	ldr	r3, [r5, #16]
 8003ce2:	b9eb      	cbnz	r3, 8003d20 <_vfiprintf_r+0x78>
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 fb5c 	bl	80043a4 <__swsetup_r>
 8003cec:	b1c0      	cbz	r0, 8003d20 <_vfiprintf_r+0x78>
 8003cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cf0:	07dc      	lsls	r4, r3, #31
 8003cf2:	d50e      	bpl.n	8003d12 <_vfiprintf_r+0x6a>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	b01d      	add	sp, #116	; 0x74
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfe:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <_vfiprintf_r+0x244>)
 8003d00:	429d      	cmp	r5, r3
 8003d02:	d101      	bne.n	8003d08 <_vfiprintf_r+0x60>
 8003d04:	68b5      	ldr	r5, [r6, #8]
 8003d06:	e7df      	b.n	8003cc8 <_vfiprintf_r+0x20>
 8003d08:	4b79      	ldr	r3, [pc, #484]	; (8003ef0 <_vfiprintf_r+0x248>)
 8003d0a:	429d      	cmp	r5, r3
 8003d0c:	bf08      	it	eq
 8003d0e:	68f5      	ldreq	r5, [r6, #12]
 8003d10:	e7da      	b.n	8003cc8 <_vfiprintf_r+0x20>
 8003d12:	89ab      	ldrh	r3, [r5, #12]
 8003d14:	0598      	lsls	r0, r3, #22
 8003d16:	d4ed      	bmi.n	8003cf4 <_vfiprintf_r+0x4c>
 8003d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d1a:	f7ff ff08 	bl	8003b2e <__retarget_lock_release_recursive>
 8003d1e:	e7e9      	b.n	8003cf4 <_vfiprintf_r+0x4c>
 8003d20:	2300      	movs	r3, #0
 8003d22:	9309      	str	r3, [sp, #36]	; 0x24
 8003d24:	2320      	movs	r3, #32
 8003d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d2a:	2330      	movs	r3, #48	; 0x30
 8003d2c:	f04f 0901 	mov.w	r9, #1
 8003d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ef4 <_vfiprintf_r+0x24c>
 8003d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	469a      	mov	sl, r3
 8003d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d44:	b10a      	cbz	r2, 8003d4a <_vfiprintf_r+0xa2>
 8003d46:	2a25      	cmp	r2, #37	; 0x25
 8003d48:	d1f9      	bne.n	8003d3e <_vfiprintf_r+0x96>
 8003d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4e:	d00b      	beq.n	8003d68 <_vfiprintf_r+0xc0>
 8003d50:	465b      	mov	r3, fp
 8003d52:	4622      	mov	r2, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7ff ff93 	bl	8003c82 <__sfputs_r>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f000 80aa 	beq.w	8003eb6 <_vfiprintf_r+0x20e>
 8003d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d64:	445a      	add	r2, fp
 8003d66:	9209      	str	r2, [sp, #36]	; 0x24
 8003d68:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a2 	beq.w	8003eb6 <_vfiprintf_r+0x20e>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7c:	f10a 0a01 	add.w	sl, sl, #1
 8003d80:	9304      	str	r3, [sp, #16]
 8003d82:	9307      	str	r3, [sp, #28]
 8003d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d88:	931a      	str	r3, [sp, #104]	; 0x68
 8003d8a:	4654      	mov	r4, sl
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d92:	4858      	ldr	r0, [pc, #352]	; (8003ef4 <_vfiprintf_r+0x24c>)
 8003d94:	f000 fcba 	bl	800470c <memchr>
 8003d98:	9a04      	ldr	r2, [sp, #16]
 8003d9a:	b9d8      	cbnz	r0, 8003dd4 <_vfiprintf_r+0x12c>
 8003d9c:	06d1      	lsls	r1, r2, #27
 8003d9e:	bf44      	itt	mi
 8003da0:	2320      	movmi	r3, #32
 8003da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da6:	0713      	lsls	r3, r2, #28
 8003da8:	bf44      	itt	mi
 8003daa:	232b      	movmi	r3, #43	; 0x2b
 8003dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db0:	f89a 3000 	ldrb.w	r3, [sl]
 8003db4:	2b2a      	cmp	r3, #42	; 0x2a
 8003db6:	d015      	beq.n	8003de4 <_vfiprintf_r+0x13c>
 8003db8:	4654      	mov	r4, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f04f 0c0a 	mov.w	ip, #10
 8003dc0:	9a07      	ldr	r2, [sp, #28]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc8:	3b30      	subs	r3, #48	; 0x30
 8003dca:	2b09      	cmp	r3, #9
 8003dcc:	d94e      	bls.n	8003e6c <_vfiprintf_r+0x1c4>
 8003dce:	b1b0      	cbz	r0, 8003dfe <_vfiprintf_r+0x156>
 8003dd0:	9207      	str	r2, [sp, #28]
 8003dd2:	e014      	b.n	8003dfe <_vfiprintf_r+0x156>
 8003dd4:	eba0 0308 	sub.w	r3, r0, r8
 8003dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	46a2      	mov	sl, r4
 8003de0:	9304      	str	r3, [sp, #16]
 8003de2:	e7d2      	b.n	8003d8a <_vfiprintf_r+0xe2>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	1d19      	adds	r1, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	9103      	str	r1, [sp, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bfbb      	ittet	lt
 8003df0:	425b      	neglt	r3, r3
 8003df2:	f042 0202 	orrlt.w	r2, r2, #2
 8003df6:	9307      	strge	r3, [sp, #28]
 8003df8:	9307      	strlt	r3, [sp, #28]
 8003dfa:	bfb8      	it	lt
 8003dfc:	9204      	strlt	r2, [sp, #16]
 8003dfe:	7823      	ldrb	r3, [r4, #0]
 8003e00:	2b2e      	cmp	r3, #46	; 0x2e
 8003e02:	d10c      	bne.n	8003e1e <_vfiprintf_r+0x176>
 8003e04:	7863      	ldrb	r3, [r4, #1]
 8003e06:	2b2a      	cmp	r3, #42	; 0x2a
 8003e08:	d135      	bne.n	8003e76 <_vfiprintf_r+0x1ce>
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	3402      	adds	r4, #2
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9203      	str	r2, [sp, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bfb8      	it	lt
 8003e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e1c:	9305      	str	r3, [sp, #20]
 8003e1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ef8 <_vfiprintf_r+0x250>
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	7821      	ldrb	r1, [r4, #0]
 8003e28:	f000 fc70 	bl	800470c <memchr>
 8003e2c:	b140      	cbz	r0, 8003e40 <_vfiprintf_r+0x198>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	eba0 000a 	sub.w	r0, r0, sl
 8003e34:	fa03 f000 	lsl.w	r0, r3, r0
 8003e38:	9b04      	ldr	r3, [sp, #16]
 8003e3a:	3401      	adds	r4, #1
 8003e3c:	4303      	orrs	r3, r0
 8003e3e:	9304      	str	r3, [sp, #16]
 8003e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e44:	2206      	movs	r2, #6
 8003e46:	482d      	ldr	r0, [pc, #180]	; (8003efc <_vfiprintf_r+0x254>)
 8003e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4c:	f000 fc5e 	bl	800470c <memchr>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d03f      	beq.n	8003ed4 <_vfiprintf_r+0x22c>
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <_vfiprintf_r+0x258>)
 8003e56:	bb1b      	cbnz	r3, 8003ea0 <_vfiprintf_r+0x1f8>
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	f023 0307 	bic.w	r3, r3, #7
 8003e60:	3308      	adds	r3, #8
 8003e62:	9303      	str	r3, [sp, #12]
 8003e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e66:	443b      	add	r3, r7
 8003e68:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6a:	e767      	b.n	8003d3c <_vfiprintf_r+0x94>
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e74:	e7a5      	b.n	8003dc2 <_vfiprintf_r+0x11a>
 8003e76:	2300      	movs	r3, #0
 8003e78:	f04f 0c0a 	mov.w	ip, #10
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	3401      	adds	r4, #1
 8003e80:	9305      	str	r3, [sp, #20]
 8003e82:	4620      	mov	r0, r4
 8003e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e88:	3a30      	subs	r2, #48	; 0x30
 8003e8a:	2a09      	cmp	r2, #9
 8003e8c:	d903      	bls.n	8003e96 <_vfiprintf_r+0x1ee>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0c5      	beq.n	8003e1e <_vfiprintf_r+0x176>
 8003e92:	9105      	str	r1, [sp, #20]
 8003e94:	e7c3      	b.n	8003e1e <_vfiprintf_r+0x176>
 8003e96:	4604      	mov	r4, r0
 8003e98:	2301      	movs	r3, #1
 8003e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9e:	e7f0      	b.n	8003e82 <_vfiprintf_r+0x1da>
 8003ea0:	ab03      	add	r3, sp, #12
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <_vfiprintf_r+0x25c>)
 8003eaa:	a904      	add	r1, sp, #16
 8003eac:	f3af 8000 	nop.w
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	1c78      	adds	r0, r7, #1
 8003eb4:	d1d6      	bne.n	8003e64 <_vfiprintf_r+0x1bc>
 8003eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	d405      	bmi.n	8003ec8 <_vfiprintf_r+0x220>
 8003ebc:	89ab      	ldrh	r3, [r5, #12]
 8003ebe:	059a      	lsls	r2, r3, #22
 8003ec0:	d402      	bmi.n	8003ec8 <_vfiprintf_r+0x220>
 8003ec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec4:	f7ff fe33 	bl	8003b2e <__retarget_lock_release_recursive>
 8003ec8:	89ab      	ldrh	r3, [r5, #12]
 8003eca:	065b      	lsls	r3, r3, #25
 8003ecc:	f53f af12 	bmi.w	8003cf4 <_vfiprintf_r+0x4c>
 8003ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed2:	e711      	b.n	8003cf8 <_vfiprintf_r+0x50>
 8003ed4:	ab03      	add	r3, sp, #12
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4630      	mov	r0, r6
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <_vfiprintf_r+0x25c>)
 8003ede:	a904      	add	r1, sp, #16
 8003ee0:	f000 f882 	bl	8003fe8 <_printf_i>
 8003ee4:	e7e4      	b.n	8003eb0 <_vfiprintf_r+0x208>
 8003ee6:	bf00      	nop
 8003ee8:	08004954 	.word	0x08004954
 8003eec:	08004974 	.word	0x08004974
 8003ef0:	08004934 	.word	0x08004934
 8003ef4:	08004994 	.word	0x08004994
 8003ef8:	0800499a 	.word	0x0800499a
 8003efc:	0800499e 	.word	0x0800499e
 8003f00:	00000000 	.word	0x00000000
 8003f04:	08003c83 	.word	0x08003c83

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4699      	mov	r9, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	4607      	mov	r7, r0
 8003f16:	4293      	cmp	r3, r2
 8003f18:	bfb8      	it	lt
 8003f1a:	4613      	movlt	r3, r2
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f22:	460c      	mov	r4, r1
 8003f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f28:	b10a      	cbz	r2, 8003f2e <_printf_common+0x26>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0699      	lsls	r1, r3, #26
 8003f32:	bf42      	ittt	mi
 8003f34:	6833      	ldrmi	r3, [r6, #0]
 8003f36:	3302      	addmi	r3, #2
 8003f38:	6033      	strmi	r3, [r6, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d106      	bne.n	8003f50 <_printf_common+0x48>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dc28      	bgt.n	8003fa2 <_printf_common+0x9a>
 8003f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f54:	1e13      	subs	r3, r2, #0
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d42d      	bmi.n	8003fbc <_printf_common+0xb4>
 8003f60:	4649      	mov	r1, r9
 8003f62:	4638      	mov	r0, r7
 8003f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f68:	47c0      	blx	r8
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d020      	beq.n	8003fb0 <_printf_common+0xa8>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	68e5      	ldr	r5, [r4, #12]
 8003f72:	f003 0306 	and.w	r3, r3, #6
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf18      	it	ne
 8003f7a:	2500      	movne	r5, #0
 8003f7c:	6832      	ldr	r2, [r6, #0]
 8003f7e:	f04f 0600 	mov.w	r6, #0
 8003f82:	68a3      	ldr	r3, [r4, #8]
 8003f84:	bf08      	it	eq
 8003f86:	1aad      	subeq	r5, r5, r2
 8003f88:	6922      	ldr	r2, [r4, #16]
 8003f8a:	bf08      	it	eq
 8003f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfc4      	itt	gt
 8003f94:	1a9b      	subgt	r3, r3, r2
 8003f96:	18ed      	addgt	r5, r5, r3
 8003f98:	341a      	adds	r4, #26
 8003f9a:	42b5      	cmp	r5, r6
 8003f9c:	d11a      	bne.n	8003fd4 <_printf_common+0xcc>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e008      	b.n	8003fb4 <_printf_common+0xac>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4652      	mov	r2, sl
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4638      	mov	r0, r7
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d103      	bne.n	8003fb8 <_printf_common+0xb0>
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7c4      	b.n	8003f46 <_printf_common+0x3e>
 8003fbc:	2030      	movs	r0, #48	; 0x30
 8003fbe:	18e1      	adds	r1, r4, r3
 8003fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fca:	4422      	add	r2, r4
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd2:	e7c5      	b.n	8003f60 <_printf_common+0x58>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4649      	mov	r1, r9
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d0e6      	beq.n	8003fb0 <_printf_common+0xa8>
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7d9      	b.n	8003f9a <_printf_common+0x92>
	...

08003fe8 <_printf_i>:
 8003fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	7e0f      	ldrb	r7, [r1, #24]
 8003fee:	4691      	mov	r9, r2
 8003ff0:	2f78      	cmp	r7, #120	; 0x78
 8003ff2:	4680      	mov	r8, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	469a      	mov	sl, r3
 8003ff8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffe:	d807      	bhi.n	8004010 <_printf_i+0x28>
 8004000:	2f62      	cmp	r7, #98	; 0x62
 8004002:	d80a      	bhi.n	800401a <_printf_i+0x32>
 8004004:	2f00      	cmp	r7, #0
 8004006:	f000 80d9 	beq.w	80041bc <_printf_i+0x1d4>
 800400a:	2f58      	cmp	r7, #88	; 0x58
 800400c:	f000 80a4 	beq.w	8004158 <_printf_i+0x170>
 8004010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004018:	e03a      	b.n	8004090 <_printf_i+0xa8>
 800401a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401e:	2b15      	cmp	r3, #21
 8004020:	d8f6      	bhi.n	8004010 <_printf_i+0x28>
 8004022:	a101      	add	r1, pc, #4	; (adr r1, 8004028 <_printf_i+0x40>)
 8004024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004028:	08004081 	.word	0x08004081
 800402c:	08004095 	.word	0x08004095
 8004030:	08004011 	.word	0x08004011
 8004034:	08004011 	.word	0x08004011
 8004038:	08004011 	.word	0x08004011
 800403c:	08004011 	.word	0x08004011
 8004040:	08004095 	.word	0x08004095
 8004044:	08004011 	.word	0x08004011
 8004048:	08004011 	.word	0x08004011
 800404c:	08004011 	.word	0x08004011
 8004050:	08004011 	.word	0x08004011
 8004054:	080041a3 	.word	0x080041a3
 8004058:	080040c5 	.word	0x080040c5
 800405c:	08004185 	.word	0x08004185
 8004060:	08004011 	.word	0x08004011
 8004064:	08004011 	.word	0x08004011
 8004068:	080041c5 	.word	0x080041c5
 800406c:	08004011 	.word	0x08004011
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004011 	.word	0x08004011
 8004078:	08004011 	.word	0x08004011
 800407c:	0800418d 	.word	0x0800418d
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	1d1a      	adds	r2, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	602a      	str	r2, [r5, #0]
 8004088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800408c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004090:	2301      	movs	r3, #1
 8004092:	e0a4      	b.n	80041de <_printf_i+0x1f6>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	6829      	ldr	r1, [r5, #0]
 8004098:	0606      	lsls	r6, r0, #24
 800409a:	f101 0304 	add.w	r3, r1, #4
 800409e:	d50a      	bpl.n	80040b6 <_printf_i+0xce>
 80040a0:	680e      	ldr	r6, [r1, #0]
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	da03      	bge.n	80040b0 <_printf_i+0xc8>
 80040a8:	232d      	movs	r3, #45	; 0x2d
 80040aa:	4276      	negs	r6, r6
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b0:	230a      	movs	r3, #10
 80040b2:	485e      	ldr	r0, [pc, #376]	; (800422c <_printf_i+0x244>)
 80040b4:	e019      	b.n	80040ea <_printf_i+0x102>
 80040b6:	680e      	ldr	r6, [r1, #0]
 80040b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	bf18      	it	ne
 80040c0:	b236      	sxthne	r6, r6
 80040c2:	e7ef      	b.n	80040a4 <_printf_i+0xbc>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	1d19      	adds	r1, r3, #4
 80040ca:	6029      	str	r1, [r5, #0]
 80040cc:	0601      	lsls	r1, r0, #24
 80040ce:	d501      	bpl.n	80040d4 <_printf_i+0xec>
 80040d0:	681e      	ldr	r6, [r3, #0]
 80040d2:	e002      	b.n	80040da <_printf_i+0xf2>
 80040d4:	0646      	lsls	r6, r0, #25
 80040d6:	d5fb      	bpl.n	80040d0 <_printf_i+0xe8>
 80040d8:	881e      	ldrh	r6, [r3, #0]
 80040da:	2f6f      	cmp	r7, #111	; 0x6f
 80040dc:	bf0c      	ite	eq
 80040de:	2308      	moveq	r3, #8
 80040e0:	230a      	movne	r3, #10
 80040e2:	4852      	ldr	r0, [pc, #328]	; (800422c <_printf_i+0x244>)
 80040e4:	2100      	movs	r1, #0
 80040e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ea:	6865      	ldr	r5, [r4, #4]
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	bfa8      	it	ge
 80040f0:	6821      	ldrge	r1, [r4, #0]
 80040f2:	60a5      	str	r5, [r4, #8]
 80040f4:	bfa4      	itt	ge
 80040f6:	f021 0104 	bicge.w	r1, r1, #4
 80040fa:	6021      	strge	r1, [r4, #0]
 80040fc:	b90e      	cbnz	r6, 8004102 <_printf_i+0x11a>
 80040fe:	2d00      	cmp	r5, #0
 8004100:	d04d      	beq.n	800419e <_printf_i+0x1b6>
 8004102:	4615      	mov	r5, r2
 8004104:	fbb6 f1f3 	udiv	r1, r6, r3
 8004108:	fb03 6711 	mls	r7, r3, r1, r6
 800410c:	5dc7      	ldrb	r7, [r0, r7]
 800410e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004112:	4637      	mov	r7, r6
 8004114:	42bb      	cmp	r3, r7
 8004116:	460e      	mov	r6, r1
 8004118:	d9f4      	bls.n	8004104 <_printf_i+0x11c>
 800411a:	2b08      	cmp	r3, #8
 800411c:	d10b      	bne.n	8004136 <_printf_i+0x14e>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	07de      	lsls	r6, r3, #31
 8004122:	d508      	bpl.n	8004136 <_printf_i+0x14e>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6861      	ldr	r1, [r4, #4]
 8004128:	4299      	cmp	r1, r3
 800412a:	bfde      	ittt	le
 800412c:	2330      	movle	r3, #48	; 0x30
 800412e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004136:	1b52      	subs	r2, r2, r5
 8004138:	6122      	str	r2, [r4, #16]
 800413a:	464b      	mov	r3, r9
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f8cd a000 	str.w	sl, [sp]
 8004144:	aa03      	add	r2, sp, #12
 8004146:	f7ff fedf 	bl	8003f08 <_printf_common>
 800414a:	3001      	adds	r0, #1
 800414c:	d14c      	bne.n	80041e8 <_printf_i+0x200>
 800414e:	f04f 30ff 	mov.w	r0, #4294967295
 8004152:	b004      	add	sp, #16
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	4834      	ldr	r0, [pc, #208]	; (800422c <_printf_i+0x244>)
 800415a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800415e:	6829      	ldr	r1, [r5, #0]
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f851 6b04 	ldr.w	r6, [r1], #4
 8004166:	6029      	str	r1, [r5, #0]
 8004168:	061d      	lsls	r5, r3, #24
 800416a:	d514      	bpl.n	8004196 <_printf_i+0x1ae>
 800416c:	07df      	lsls	r7, r3, #31
 800416e:	bf44      	itt	mi
 8004170:	f043 0320 	orrmi.w	r3, r3, #32
 8004174:	6023      	strmi	r3, [r4, #0]
 8004176:	b91e      	cbnz	r6, 8004180 <_printf_i+0x198>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f023 0320 	bic.w	r3, r3, #32
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	2310      	movs	r3, #16
 8004182:	e7af      	b.n	80040e4 <_printf_i+0xfc>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	f043 0320 	orr.w	r3, r3, #32
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	2378      	movs	r3, #120	; 0x78
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <_printf_i+0x248>)
 8004190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004194:	e7e3      	b.n	800415e <_printf_i+0x176>
 8004196:	0659      	lsls	r1, r3, #25
 8004198:	bf48      	it	mi
 800419a:	b2b6      	uxthmi	r6, r6
 800419c:	e7e6      	b.n	800416c <_printf_i+0x184>
 800419e:	4615      	mov	r5, r2
 80041a0:	e7bb      	b.n	800411a <_printf_i+0x132>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	6826      	ldr	r6, [r4, #0]
 80041a6:	1d18      	adds	r0, r3, #4
 80041a8:	6961      	ldr	r1, [r4, #20]
 80041aa:	6028      	str	r0, [r5, #0]
 80041ac:	0635      	lsls	r5, r6, #24
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	d501      	bpl.n	80041b6 <_printf_i+0x1ce>
 80041b2:	6019      	str	r1, [r3, #0]
 80041b4:	e002      	b.n	80041bc <_printf_i+0x1d4>
 80041b6:	0670      	lsls	r0, r6, #25
 80041b8:	d5fb      	bpl.n	80041b2 <_printf_i+0x1ca>
 80041ba:	8019      	strh	r1, [r3, #0]
 80041bc:	2300      	movs	r3, #0
 80041be:	4615      	mov	r5, r2
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	e7ba      	b.n	800413a <_printf_i+0x152>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	2100      	movs	r1, #0
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	602a      	str	r2, [r5, #0]
 80041cc:	681d      	ldr	r5, [r3, #0]
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fa9b 	bl	800470c <memchr>
 80041d6:	b108      	cbz	r0, 80041dc <_printf_i+0x1f4>
 80041d8:	1b40      	subs	r0, r0, r5
 80041da:	6060      	str	r0, [r4, #4]
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	6123      	str	r3, [r4, #16]
 80041e0:	2300      	movs	r3, #0
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e6:	e7a8      	b.n	800413a <_printf_i+0x152>
 80041e8:	462a      	mov	r2, r5
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	47d0      	blx	sl
 80041f2:	3001      	adds	r0, #1
 80041f4:	d0ab      	beq.n	800414e <_printf_i+0x166>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	079b      	lsls	r3, r3, #30
 80041fa:	d413      	bmi.n	8004224 <_printf_i+0x23c>
 80041fc:	68e0      	ldr	r0, [r4, #12]
 80041fe:	9b03      	ldr	r3, [sp, #12]
 8004200:	4298      	cmp	r0, r3
 8004202:	bfb8      	it	lt
 8004204:	4618      	movlt	r0, r3
 8004206:	e7a4      	b.n	8004152 <_printf_i+0x16a>
 8004208:	2301      	movs	r3, #1
 800420a:	4632      	mov	r2, r6
 800420c:	4649      	mov	r1, r9
 800420e:	4640      	mov	r0, r8
 8004210:	47d0      	blx	sl
 8004212:	3001      	adds	r0, #1
 8004214:	d09b      	beq.n	800414e <_printf_i+0x166>
 8004216:	3501      	adds	r5, #1
 8004218:	68e3      	ldr	r3, [r4, #12]
 800421a:	9903      	ldr	r1, [sp, #12]
 800421c:	1a5b      	subs	r3, r3, r1
 800421e:	42ab      	cmp	r3, r5
 8004220:	dcf2      	bgt.n	8004208 <_printf_i+0x220>
 8004222:	e7eb      	b.n	80041fc <_printf_i+0x214>
 8004224:	2500      	movs	r5, #0
 8004226:	f104 0619 	add.w	r6, r4, #25
 800422a:	e7f5      	b.n	8004218 <_printf_i+0x230>
 800422c:	080049a5 	.word	0x080049a5
 8004230:	080049b6 	.word	0x080049b6

08004234 <_sbrk_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	2300      	movs	r3, #0
 8004238:	4d05      	ldr	r5, [pc, #20]	; (8004250 <_sbrk_r+0x1c>)
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fc fefe 	bl	8001040 <_sbrk>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_sbrk_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_sbrk_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	2000022c 	.word	0x2000022c

08004254 <__sread>:
 8004254:	b510      	push	{r4, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425c:	f000 fab8 	bl	80047d0 <_read_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	bfab      	itete	ge
 8004264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004266:	89a3      	ldrhlt	r3, [r4, #12]
 8004268:	181b      	addge	r3, r3, r0
 800426a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800426e:	bfac      	ite	ge
 8004270:	6563      	strge	r3, [r4, #84]	; 0x54
 8004272:	81a3      	strhlt	r3, [r4, #12]
 8004274:	bd10      	pop	{r4, pc}

08004276 <__swrite>:
 8004276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427a:	461f      	mov	r7, r3
 800427c:	898b      	ldrh	r3, [r1, #12]
 800427e:	4605      	mov	r5, r0
 8004280:	05db      	lsls	r3, r3, #23
 8004282:	460c      	mov	r4, r1
 8004284:	4616      	mov	r6, r2
 8004286:	d505      	bpl.n	8004294 <__swrite+0x1e>
 8004288:	2302      	movs	r3, #2
 800428a:	2200      	movs	r2, #0
 800428c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004290:	f000 f9c4 	bl	800461c <_lseek_r>
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	4632      	mov	r2, r6
 8004298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	4628      	mov	r0, r5
 80042a0:	463b      	mov	r3, r7
 80042a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042aa:	f000 b869 	b.w	8004380 <_write_r>

080042ae <__sseek>:
 80042ae:	b510      	push	{r4, lr}
 80042b0:	460c      	mov	r4, r1
 80042b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b6:	f000 f9b1 	bl	800461c <_lseek_r>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	bf15      	itete	ne
 80042c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ca:	81a3      	strheq	r3, [r4, #12]
 80042cc:	bf18      	it	ne
 80042ce:	81a3      	strhne	r3, [r4, #12]
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <__sclose>:
 80042d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d6:	f000 b8d3 	b.w	8004480 <_close_r>
	...

080042dc <__swbuf_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	460e      	mov	r6, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	4605      	mov	r5, r0
 80042e4:	b118      	cbz	r0, 80042ee <__swbuf_r+0x12>
 80042e6:	6983      	ldr	r3, [r0, #24]
 80042e8:	b90b      	cbnz	r3, 80042ee <__swbuf_r+0x12>
 80042ea:	f7ff fb81 	bl	80039f0 <__sinit>
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <__swbuf_r+0x98>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d12b      	bne.n	800434c <__swbuf_r+0x70>
 80042f4:	686c      	ldr	r4, [r5, #4]
 80042f6:	69a3      	ldr	r3, [r4, #24]
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	071a      	lsls	r2, r3, #28
 80042fe:	d52f      	bpl.n	8004360 <__swbuf_r+0x84>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	b36b      	cbz	r3, 8004360 <__swbuf_r+0x84>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	b2f6      	uxtb	r6, r6
 800430a:	1ac0      	subs	r0, r0, r3
 800430c:	6963      	ldr	r3, [r4, #20]
 800430e:	4637      	mov	r7, r6
 8004310:	4283      	cmp	r3, r0
 8004312:	dc04      	bgt.n	800431e <__swbuf_r+0x42>
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f944 	bl	80045a4 <_fflush_r>
 800431c:	bb30      	cbnz	r0, 800436c <__swbuf_r+0x90>
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	3001      	adds	r0, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	60a3      	str	r3, [r4, #8]
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	6022      	str	r2, [r4, #0]
 800432c:	701e      	strb	r6, [r3, #0]
 800432e:	6963      	ldr	r3, [r4, #20]
 8004330:	4283      	cmp	r3, r0
 8004332:	d004      	beq.n	800433e <__swbuf_r+0x62>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d506      	bpl.n	8004348 <__swbuf_r+0x6c>
 800433a:	2e0a      	cmp	r6, #10
 800433c:	d104      	bne.n	8004348 <__swbuf_r+0x6c>
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 f92f 	bl	80045a4 <_fflush_r>
 8004346:	b988      	cbnz	r0, 800436c <__swbuf_r+0x90>
 8004348:	4638      	mov	r0, r7
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <__swbuf_r+0x9c>)
 800434e:	429c      	cmp	r4, r3
 8004350:	d101      	bne.n	8004356 <__swbuf_r+0x7a>
 8004352:	68ac      	ldr	r4, [r5, #8]
 8004354:	e7cf      	b.n	80042f6 <__swbuf_r+0x1a>
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <__swbuf_r+0xa0>)
 8004358:	429c      	cmp	r4, r3
 800435a:	bf08      	it	eq
 800435c:	68ec      	ldreq	r4, [r5, #12]
 800435e:	e7ca      	b.n	80042f6 <__swbuf_r+0x1a>
 8004360:	4621      	mov	r1, r4
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f81e 	bl	80043a4 <__swsetup_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0cb      	beq.n	8004304 <__swbuf_r+0x28>
 800436c:	f04f 37ff 	mov.w	r7, #4294967295
 8004370:	e7ea      	b.n	8004348 <__swbuf_r+0x6c>
 8004372:	bf00      	nop
 8004374:	08004954 	.word	0x08004954
 8004378:	08004974 	.word	0x08004974
 800437c:	08004934 	.word	0x08004934

08004380 <_write_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	2200      	movs	r2, #0
 800438a:	4d05      	ldr	r5, [pc, #20]	; (80043a0 <_write_r+0x20>)
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fe0a 	bl	8000fa8 <_write>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_write_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_write_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	2000022c 	.word	0x2000022c

080043a4 <__swsetup_r>:
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <__swsetup_r+0xcc>)
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	4606      	mov	r6, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	b125      	cbz	r5, 80043ba <__swsetup_r+0x16>
 80043b0:	69ab      	ldr	r3, [r5, #24]
 80043b2:	b913      	cbnz	r3, 80043ba <__swsetup_r+0x16>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff fb1b 	bl	80039f0 <__sinit>
 80043ba:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <__swsetup_r+0xd0>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	d10f      	bne.n	80043e0 <__swsetup_r+0x3c>
 80043c0:	686c      	ldr	r4, [r5, #4]
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	d42c      	bmi.n	8004426 <__swsetup_r+0x82>
 80043cc:	06dd      	lsls	r5, r3, #27
 80043ce:	d411      	bmi.n	80043f4 <__swsetup_r+0x50>
 80043d0:	2309      	movs	r3, #9
 80043d2:	6033      	str	r3, [r6, #0]
 80043d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	e03e      	b.n	800445e <__swsetup_r+0xba>
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <__swsetup_r+0xd4>)
 80043e2:	429c      	cmp	r4, r3
 80043e4:	d101      	bne.n	80043ea <__swsetup_r+0x46>
 80043e6:	68ac      	ldr	r4, [r5, #8]
 80043e8:	e7eb      	b.n	80043c2 <__swsetup_r+0x1e>
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <__swsetup_r+0xd8>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	bf08      	it	eq
 80043f0:	68ec      	ldreq	r4, [r5, #12]
 80043f2:	e7e6      	b.n	80043c2 <__swsetup_r+0x1e>
 80043f4:	0758      	lsls	r0, r3, #29
 80043f6:	d512      	bpl.n	800441e <__swsetup_r+0x7a>
 80043f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043fa:	b141      	cbz	r1, 800440e <__swsetup_r+0x6a>
 80043fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <__swsetup_r+0x66>
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f99b 	bl	8004740 <_free_r>
 800440a:	2300      	movs	r3, #0
 800440c:	6363      	str	r3, [r4, #52]	; 0x34
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	2300      	movs	r3, #0
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	b94b      	cbnz	r3, 800443e <__swsetup_r+0x9a>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d003      	beq.n	800443e <__swsetup_r+0x9a>
 8004436:	4621      	mov	r1, r4
 8004438:	4630      	mov	r0, r6
 800443a:	f000 f927 	bl	800468c <__smakebuf_r>
 800443e:	89a0      	ldrh	r0, [r4, #12]
 8004440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004444:	f010 0301 	ands.w	r3, r0, #1
 8004448:	d00a      	beq.n	8004460 <__swsetup_r+0xbc>
 800444a:	2300      	movs	r3, #0
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6963      	ldr	r3, [r4, #20]
 8004450:	425b      	negs	r3, r3
 8004452:	61a3      	str	r3, [r4, #24]
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	b943      	cbnz	r3, 800446a <__swsetup_r+0xc6>
 8004458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800445c:	d1ba      	bne.n	80043d4 <__swsetup_r+0x30>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	0781      	lsls	r1, r0, #30
 8004462:	bf58      	it	pl
 8004464:	6963      	ldrpl	r3, [r4, #20]
 8004466:	60a3      	str	r3, [r4, #8]
 8004468:	e7f4      	b.n	8004454 <__swsetup_r+0xb0>
 800446a:	2000      	movs	r0, #0
 800446c:	e7f7      	b.n	800445e <__swsetup_r+0xba>
 800446e:	bf00      	nop
 8004470:	2000000c 	.word	0x2000000c
 8004474:	08004954 	.word	0x08004954
 8004478:	08004974 	.word	0x08004974
 800447c:	08004934 	.word	0x08004934

08004480 <_close_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	2300      	movs	r3, #0
 8004484:	4d05      	ldr	r5, [pc, #20]	; (800449c <_close_r+0x1c>)
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fc fda8 	bl	8000fe0 <_close>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_close_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_close_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	2000022c 	.word	0x2000022c

080044a0 <__sflush_r>:
 80044a0:	898a      	ldrh	r2, [r1, #12]
 80044a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a4:	4605      	mov	r5, r0
 80044a6:	0710      	lsls	r0, r2, #28
 80044a8:	460c      	mov	r4, r1
 80044aa:	d457      	bmi.n	800455c <__sflush_r+0xbc>
 80044ac:	684b      	ldr	r3, [r1, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dc04      	bgt.n	80044bc <__sflush_r+0x1c>
 80044b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	dc01      	bgt.n	80044bc <__sflush_r+0x1c>
 80044b8:	2000      	movs	r0, #0
 80044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044be:	2e00      	cmp	r6, #0
 80044c0:	d0fa      	beq.n	80044b8 <__sflush_r+0x18>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044c8:	682f      	ldr	r7, [r5, #0]
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	d032      	beq.n	8004534 <__sflush_r+0x94>
 80044ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	075a      	lsls	r2, r3, #29
 80044d4:	d505      	bpl.n	80044e2 <__sflush_r+0x42>
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	1ac0      	subs	r0, r0, r3
 80044da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044dc:	b10b      	cbz	r3, 80044e2 <__sflush_r+0x42>
 80044de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e0:	1ac0      	subs	r0, r0, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	4602      	mov	r2, r0
 80044e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044e8:	4628      	mov	r0, r5
 80044ea:	6a21      	ldr	r1, [r4, #32]
 80044ec:	47b0      	blx	r6
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	d106      	bne.n	8004502 <__sflush_r+0x62>
 80044f4:	6829      	ldr	r1, [r5, #0]
 80044f6:	291d      	cmp	r1, #29
 80044f8:	d82c      	bhi.n	8004554 <__sflush_r+0xb4>
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <__sflush_r+0x100>)
 80044fc:	40ca      	lsrs	r2, r1
 80044fe:	07d6      	lsls	r6, r2, #31
 8004500:	d528      	bpl.n	8004554 <__sflush_r+0xb4>
 8004502:	2200      	movs	r2, #0
 8004504:	6062      	str	r2, [r4, #4]
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	04d9      	lsls	r1, r3, #19
 800450a:	6022      	str	r2, [r4, #0]
 800450c:	d504      	bpl.n	8004518 <__sflush_r+0x78>
 800450e:	1c42      	adds	r2, r0, #1
 8004510:	d101      	bne.n	8004516 <__sflush_r+0x76>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b903      	cbnz	r3, 8004518 <__sflush_r+0x78>
 8004516:	6560      	str	r0, [r4, #84]	; 0x54
 8004518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451a:	602f      	str	r7, [r5, #0]
 800451c:	2900      	cmp	r1, #0
 800451e:	d0cb      	beq.n	80044b8 <__sflush_r+0x18>
 8004520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004524:	4299      	cmp	r1, r3
 8004526:	d002      	beq.n	800452e <__sflush_r+0x8e>
 8004528:	4628      	mov	r0, r5
 800452a:	f000 f909 	bl	8004740 <_free_r>
 800452e:	2000      	movs	r0, #0
 8004530:	6360      	str	r0, [r4, #52]	; 0x34
 8004532:	e7c2      	b.n	80044ba <__sflush_r+0x1a>
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	2301      	movs	r3, #1
 8004538:	4628      	mov	r0, r5
 800453a:	47b0      	blx	r6
 800453c:	1c41      	adds	r1, r0, #1
 800453e:	d1c7      	bne.n	80044d0 <__sflush_r+0x30>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0c4      	beq.n	80044d0 <__sflush_r+0x30>
 8004546:	2b1d      	cmp	r3, #29
 8004548:	d001      	beq.n	800454e <__sflush_r+0xae>
 800454a:	2b16      	cmp	r3, #22
 800454c:	d101      	bne.n	8004552 <__sflush_r+0xb2>
 800454e:	602f      	str	r7, [r5, #0]
 8004550:	e7b2      	b.n	80044b8 <__sflush_r+0x18>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	e7ae      	b.n	80044ba <__sflush_r+0x1a>
 800455c:	690f      	ldr	r7, [r1, #16]
 800455e:	2f00      	cmp	r7, #0
 8004560:	d0aa      	beq.n	80044b8 <__sflush_r+0x18>
 8004562:	0793      	lsls	r3, r2, #30
 8004564:	bf18      	it	ne
 8004566:	2300      	movne	r3, #0
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	bf08      	it	eq
 800456c:	694b      	ldreq	r3, [r1, #20]
 800456e:	1bf6      	subs	r6, r6, r7
 8004570:	600f      	str	r7, [r1, #0]
 8004572:	608b      	str	r3, [r1, #8]
 8004574:	2e00      	cmp	r6, #0
 8004576:	dd9f      	ble.n	80044b8 <__sflush_r+0x18>
 8004578:	4633      	mov	r3, r6
 800457a:	463a      	mov	r2, r7
 800457c:	4628      	mov	r0, r5
 800457e:	6a21      	ldr	r1, [r4, #32]
 8004580:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004584:	47e0      	blx	ip
 8004586:	2800      	cmp	r0, #0
 8004588:	dc06      	bgt.n	8004598 <__sflush_r+0xf8>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	e790      	b.n	80044ba <__sflush_r+0x1a>
 8004598:	4407      	add	r7, r0
 800459a:	1a36      	subs	r6, r6, r0
 800459c:	e7ea      	b.n	8004574 <__sflush_r+0xd4>
 800459e:	bf00      	nop
 80045a0:	20400001 	.word	0x20400001

080045a4 <_fflush_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	4605      	mov	r5, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	b913      	cbnz	r3, 80045b4 <_fflush_r+0x10>
 80045ae:	2500      	movs	r5, #0
 80045b0:	4628      	mov	r0, r5
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	b118      	cbz	r0, 80045be <_fflush_r+0x1a>
 80045b6:	6983      	ldr	r3, [r0, #24]
 80045b8:	b90b      	cbnz	r3, 80045be <_fflush_r+0x1a>
 80045ba:	f7ff fa19 	bl	80039f0 <__sinit>
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <_fflush_r+0x6c>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	d11b      	bne.n	80045fc <_fflush_r+0x58>
 80045c4:	686c      	ldr	r4, [r5, #4]
 80045c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ef      	beq.n	80045ae <_fflush_r+0xa>
 80045ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d0:	07d0      	lsls	r0, r2, #31
 80045d2:	d404      	bmi.n	80045de <_fflush_r+0x3a>
 80045d4:	0599      	lsls	r1, r3, #22
 80045d6:	d402      	bmi.n	80045de <_fflush_r+0x3a>
 80045d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045da:	f7ff faa7 	bl	8003b2c <__retarget_lock_acquire_recursive>
 80045de:	4628      	mov	r0, r5
 80045e0:	4621      	mov	r1, r4
 80045e2:	f7ff ff5d 	bl	80044a0 <__sflush_r>
 80045e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045e8:	4605      	mov	r5, r0
 80045ea:	07da      	lsls	r2, r3, #31
 80045ec:	d4e0      	bmi.n	80045b0 <_fflush_r+0xc>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	059b      	lsls	r3, r3, #22
 80045f2:	d4dd      	bmi.n	80045b0 <_fflush_r+0xc>
 80045f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045f6:	f7ff fa9a 	bl	8003b2e <__retarget_lock_release_recursive>
 80045fa:	e7d9      	b.n	80045b0 <_fflush_r+0xc>
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_fflush_r+0x70>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d101      	bne.n	8004606 <_fflush_r+0x62>
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	e7df      	b.n	80045c6 <_fflush_r+0x22>
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <_fflush_r+0x74>)
 8004608:	429c      	cmp	r4, r3
 800460a:	bf08      	it	eq
 800460c:	68ec      	ldreq	r4, [r5, #12]
 800460e:	e7da      	b.n	80045c6 <_fflush_r+0x22>
 8004610:	08004954 	.word	0x08004954
 8004614:	08004974 	.word	0x08004974
 8004618:	08004934 	.word	0x08004934

0800461c <_lseek_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4604      	mov	r4, r0
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	2200      	movs	r2, #0
 8004626:	4d05      	ldr	r5, [pc, #20]	; (800463c <_lseek_r+0x20>)
 8004628:	602a      	str	r2, [r5, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	f7fc fcfc 	bl	8001028 <_lseek>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_lseek_r+0x1e>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_lseek_r+0x1e>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	2000022c 	.word	0x2000022c

08004640 <__swhatbuf_r>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	460e      	mov	r6, r1
 8004644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004648:	4614      	mov	r4, r2
 800464a:	2900      	cmp	r1, #0
 800464c:	461d      	mov	r5, r3
 800464e:	b096      	sub	sp, #88	; 0x58
 8004650:	da08      	bge.n	8004664 <__swhatbuf_r+0x24>
 8004652:	2200      	movs	r2, #0
 8004654:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004658:	602a      	str	r2, [r5, #0]
 800465a:	061a      	lsls	r2, r3, #24
 800465c:	d410      	bmi.n	8004680 <__swhatbuf_r+0x40>
 800465e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004662:	e00e      	b.n	8004682 <__swhatbuf_r+0x42>
 8004664:	466a      	mov	r2, sp
 8004666:	f000 f8c5 	bl	80047f4 <_fstat_r>
 800466a:	2800      	cmp	r0, #0
 800466c:	dbf1      	blt.n	8004652 <__swhatbuf_r+0x12>
 800466e:	9a01      	ldr	r2, [sp, #4]
 8004670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004678:	425a      	negs	r2, r3
 800467a:	415a      	adcs	r2, r3
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	e7ee      	b.n	800465e <__swhatbuf_r+0x1e>
 8004680:	2340      	movs	r3, #64	; 0x40
 8004682:	2000      	movs	r0, #0
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	b016      	add	sp, #88	; 0x58
 8004688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800468c <__smakebuf_r>:
 800468c:	898b      	ldrh	r3, [r1, #12]
 800468e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004690:	079d      	lsls	r5, r3, #30
 8004692:	4606      	mov	r6, r0
 8004694:	460c      	mov	r4, r1
 8004696:	d507      	bpl.n	80046a8 <__smakebuf_r+0x1c>
 8004698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	2301      	movs	r3, #1
 80046a2:	6163      	str	r3, [r4, #20]
 80046a4:	b002      	add	sp, #8
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	466a      	mov	r2, sp
 80046aa:	ab01      	add	r3, sp, #4
 80046ac:	f7ff ffc8 	bl	8004640 <__swhatbuf_r>
 80046b0:	9900      	ldr	r1, [sp, #0]
 80046b2:	4605      	mov	r5, r0
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7ff fa5b 	bl	8003b70 <_malloc_r>
 80046ba:	b948      	cbnz	r0, 80046d0 <__smakebuf_r+0x44>
 80046bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c0:	059a      	lsls	r2, r3, #22
 80046c2:	d4ef      	bmi.n	80046a4 <__smakebuf_r+0x18>
 80046c4:	f023 0303 	bic.w	r3, r3, #3
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	e7e3      	b.n	8004698 <__smakebuf_r+0xc>
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <__smakebuf_r+0x7c>)
 80046d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	6020      	str	r0, [r4, #0]
 80046d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	6120      	str	r0, [r4, #16]
 80046e2:	6163      	str	r3, [r4, #20]
 80046e4:	9b01      	ldr	r3, [sp, #4]
 80046e6:	b15b      	cbz	r3, 8004700 <__smakebuf_r+0x74>
 80046e8:	4630      	mov	r0, r6
 80046ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ee:	f000 f893 	bl	8004818 <_isatty_r>
 80046f2:	b128      	cbz	r0, 8004700 <__smakebuf_r+0x74>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	89a0      	ldrh	r0, [r4, #12]
 8004702:	4305      	orrs	r5, r0
 8004704:	81a5      	strh	r5, [r4, #12]
 8004706:	e7cd      	b.n	80046a4 <__smakebuf_r+0x18>
 8004708:	08003989 	.word	0x08003989

0800470c <memchr>:
 800470c:	4603      	mov	r3, r0
 800470e:	b510      	push	{r4, lr}
 8004710:	b2c9      	uxtb	r1, r1
 8004712:	4402      	add	r2, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	4618      	mov	r0, r3
 8004718:	d101      	bne.n	800471e <memchr+0x12>
 800471a:	2000      	movs	r0, #0
 800471c:	e003      	b.n	8004726 <memchr+0x1a>
 800471e:	7804      	ldrb	r4, [r0, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	428c      	cmp	r4, r1
 8004724:	d1f6      	bne.n	8004714 <memchr+0x8>
 8004726:	bd10      	pop	{r4, pc}

08004728 <__malloc_lock>:
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <__malloc_lock+0x8>)
 800472a:	f7ff b9ff 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 800472e:	bf00      	nop
 8004730:	20000220 	.word	0x20000220

08004734 <__malloc_unlock>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__malloc_unlock+0x8>)
 8004736:	f7ff b9fa 	b.w	8003b2e <__retarget_lock_release_recursive>
 800473a:	bf00      	nop
 800473c:	20000220 	.word	0x20000220

08004740 <_free_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4605      	mov	r5, r0
 8004744:	2900      	cmp	r1, #0
 8004746:	d040      	beq.n	80047ca <_free_r+0x8a>
 8004748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474c:	1f0c      	subs	r4, r1, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfb8      	it	lt
 8004752:	18e4      	addlt	r4, r4, r3
 8004754:	f7ff ffe8 	bl	8004728 <__malloc_lock>
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <_free_r+0x8c>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	b933      	cbnz	r3, 800476c <_free_r+0x2c>
 800475e:	6063      	str	r3, [r4, #4]
 8004760:	6014      	str	r4, [r2, #0]
 8004762:	4628      	mov	r0, r5
 8004764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004768:	f7ff bfe4 	b.w	8004734 <__malloc_unlock>
 800476c:	42a3      	cmp	r3, r4
 800476e:	d908      	bls.n	8004782 <_free_r+0x42>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	1821      	adds	r1, r4, r0
 8004774:	428b      	cmp	r3, r1
 8004776:	bf01      	itttt	eq
 8004778:	6819      	ldreq	r1, [r3, #0]
 800477a:	685b      	ldreq	r3, [r3, #4]
 800477c:	1809      	addeq	r1, r1, r0
 800477e:	6021      	streq	r1, [r4, #0]
 8004780:	e7ed      	b.n	800475e <_free_r+0x1e>
 8004782:	461a      	mov	r2, r3
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	b10b      	cbz	r3, 800478c <_free_r+0x4c>
 8004788:	42a3      	cmp	r3, r4
 800478a:	d9fa      	bls.n	8004782 <_free_r+0x42>
 800478c:	6811      	ldr	r1, [r2, #0]
 800478e:	1850      	adds	r0, r2, r1
 8004790:	42a0      	cmp	r0, r4
 8004792:	d10b      	bne.n	80047ac <_free_r+0x6c>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	4401      	add	r1, r0
 8004798:	1850      	adds	r0, r2, r1
 800479a:	4283      	cmp	r3, r0
 800479c:	6011      	str	r1, [r2, #0]
 800479e:	d1e0      	bne.n	8004762 <_free_r+0x22>
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4401      	add	r1, r0
 80047a6:	6011      	str	r1, [r2, #0]
 80047a8:	6053      	str	r3, [r2, #4]
 80047aa:	e7da      	b.n	8004762 <_free_r+0x22>
 80047ac:	d902      	bls.n	80047b4 <_free_r+0x74>
 80047ae:	230c      	movs	r3, #12
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	e7d6      	b.n	8004762 <_free_r+0x22>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	1821      	adds	r1, r4, r0
 80047b8:	428b      	cmp	r3, r1
 80047ba:	bf01      	itttt	eq
 80047bc:	6819      	ldreq	r1, [r3, #0]
 80047be:	685b      	ldreq	r3, [r3, #4]
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	6054      	str	r4, [r2, #4]
 80047c8:	e7cb      	b.n	8004762 <_free_r+0x22>
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20000224 	.word	0x20000224

080047d0 <_read_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	4d05      	ldr	r5, [pc, #20]	; (80047f0 <_read_r+0x20>)
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fc fbc5 	bl	8000f6e <_read>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_read_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_read_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	2000022c 	.word	0x2000022c

080047f4 <_fstat_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	2300      	movs	r3, #0
 80047f8:	4d06      	ldr	r5, [pc, #24]	; (8004814 <_fstat_r+0x20>)
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	f7fc fbf8 	bl	8000ff6 <_fstat>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d102      	bne.n	8004810 <_fstat_r+0x1c>
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	b103      	cbz	r3, 8004810 <_fstat_r+0x1c>
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	bd38      	pop	{r3, r4, r5, pc}
 8004812:	bf00      	nop
 8004814:	2000022c 	.word	0x2000022c

08004818 <_isatty_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	2300      	movs	r3, #0
 800481c:	4d05      	ldr	r5, [pc, #20]	; (8004834 <_isatty_r+0x1c>)
 800481e:	4604      	mov	r4, r0
 8004820:	4608      	mov	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fc fbf6 	bl	8001014 <_isatty>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_isatty_r+0x1a>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_isatty_r+0x1a>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	2000022c 	.word	0x2000022c

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr
